// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4F6Va19MyMHcyNpURbn1mE
// Component: u2RfaeKZwHdY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ResponsiveMenu from "../../ResponsiveMenu"; // plasmic-import: EjDwpL97hh/component
import { SupabaseMutation } from "../../supabase/supabase"; // plasmic-import: n899xRAn9Nd0/codeComponent
import { SupabaseFetcher } from "../../supabase/supabase"; // plasmic-import: MLOELpD8aLSS/codeComponent
import Button from "../../Button"; // plasmic-import: 7rzM78mJWkH/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic_imported_dep_5.module.css"; // plasmic-import: 49wF7zG85s5BmUvuzSq52Y/projectcss
import plasmic_antd_5_hostless_2_css from "../imported_dep_2/plasmic_imported_dep_2.module.css"; // plasmic-import: cyCPZA1r7cMAVZTG2fBKop/projectcss
import plasmic_antd_5_hostless_3_css from "../imported_dep_8/plasmic_imported_dep_8.module.css"; // plasmic-import: h6N5thS3BWDmJSDYSW7aei/projectcss
import plasmic_antd_5_hostless_4_css from "../imported_dep_11/plasmic_imported_dep_11.module.css"; // plasmic-import: 2xrkvoGMeCr8HmCJeU43qJ/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic_imported_dep_4.module.css"; // plasmic-import: hPAx2Po3YSE2fzFsJw5Trv/projectcss
import projectcss from "./plasmic_a_d_5.module.css"; // plasmic-import: 4F6Va19MyMHcyNpURbn1mE/projectcss
import sty from "./PlasmicIngresso.module.css"; // plasmic-import: u2RfaeKZwHdY/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: DFUukaBqwOq/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: fpqx2Qlomeq/icon

createPlasmicElementProxy;

export type PlasmicIngresso__VariantMembers = {};
export type PlasmicIngresso__VariantsArgs = {};
type VariantPropType = keyof PlasmicIngresso__VariantsArgs;
export const PlasmicIngresso__VariantProps = new Array<VariantPropType>();

export type PlasmicIngresso__ArgsType = {};
type ArgPropType = keyof PlasmicIngresso__ArgsType;
export const PlasmicIngresso__ArgProps = new Array<ArgPropType>();

export type PlasmicIngresso__OverridesType = {
  root?: p.Flex<"div">;
  responsiveMenu?: p.Flex<typeof ResponsiveMenu>;
  supabaseMutation?: p.Flex<typeof SupabaseMutation>;
};

export interface DefaultIngressoProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIngresso__RenderFunc(props: {
  variants: PlasmicIngresso__VariantsArgs;
  args: PlasmicIngresso__ArgsType;
  overrides: PlasmicIngresso__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_antd_5_hostless_2_css.plasmic_tokens,
            plasmic_antd_5_hostless_3_css.plasmic_tokens,
            plasmic_antd_5_hostless_4_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <ResponsiveMenu
            data-plasmic-name={"responsiveMenu"}
            data-plasmic-override={overrides.responsiveMenu}
            className={classNames("__wab_instance", sty.responsiveMenu)}
          />

          <SupabaseMutation
            data-plasmic-name={"supabaseMutation"}
            data-plasmic-override={overrides.supabaseMutation}
            className={classNames("__wab_instance", sty.supabaseMutation)}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <SupabaseFetcher
                  className={classNames(
                    "__wab_instance",
                    sty.supabaseFetcher__mLgDh
                  )}
                  filters={(() => {
                    try {
                      return [
                        {
                          column: "id",
                          operator: "eq",
                          value: $ctx.params.id
                        }
                      ];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  name={"inscricao"}
                  table={"inscritos"}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <SupabaseFetcher
                        className={classNames(
                          "__wab_instance",
                          sty.supabaseFetcher__j2Emt
                        )}
                        filters={(() => {
                          try {
                            return [
                              {
                                column: "user_id",
                                operator: "eq",
                                value: $ctx.inscricao[0].owner_id
                                  ? $ctx.inscricao[0].owner_id
                                  : $ctx.inscricao[0].id
                              }
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        table={"payments"}
                      >
                        <ph.DataCtxReader>
                          {$ctx => (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cpXRl
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__n20Sm
                                )}
                              >
                                {"Inscri\u00e7\u00e3o"}
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $ctx.supabase;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const payment = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__deDh9
                                    )}
                                    key={currentIndex}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return $ctx.inscricao;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_1, __plasmic_idx_1) => {
                                        const inscricao = __plasmic_item_1;
                                        const currentIndex = __plasmic_idx_1;
                                        return (
                                          <p.Stack
                                            as={"div"}
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__vqRt7
                                            )}
                                            key={currentIndex}
                                          >
                                            <p.Stack
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__k6GX
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__eArNc
                                                )}
                                              >
                                                {
                                                  "C\u00f3digo de inscri\u00e7\u00e3o:"
                                                }
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ksUn6
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return inscricao.id;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </p.Stack>
                                            <p.Stack
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox___0XaY4
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__zgm1X
                                                )}
                                              >
                                                {"Nome:"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__zu7Ak
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return inscricao.name;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </p.Stack>
                                            <p.Stack
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__tlo6Y
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__pmkgk
                                                )}
                                              >
                                                {"CPF:"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__wsZZj
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return inscricao.cpf;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </p.Stack>
                                            <p.Stack
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__xvhEr
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__nQfOa
                                                )}
                                              >
                                                {"Adultos:"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ljH3K
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return payment.adults;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </p.Stack>
                                            <p.Stack
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox___7ERKh
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__deNqr
                                                )}
                                              >
                                                {"Crian\u00e7as"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__oKtge
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return payment.kids;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </p.Stack>
                                            <p.Stack
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__l2ER
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___7RJdI
                                                )}
                                              >
                                                {"Ingresso"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__kv681
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return inscricao.ticket_type ==
                                                        "saturday"
                                                        ? "SOMENTE SÁBADO"
                                                        : inscricao.ticket_type ==
                                                          "sunday"
                                                        ? "SOMENTE DOMINGO"
                                                        : "DOIS DIAS";
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </p.Stack>
                                            <Button
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button__jAhJ
                                              )}
                                              isDisabled={(() => {
                                                try {
                                                  return (() => {
                                                    const total =
                                                      payment.adults +
                                                      payment.kids;
                                                    const checked =
                                                      payment.checkedAdults +
                                                      payment.checkedKids;
                                                    return checked >= total;
                                                  })();
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return [];
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["runCode"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        customFunction:
                                                          async () => {
                                                            return (async () => {
                                                              if (
                                                                payment.checkedAdults <
                                                                payment.adults
                                                              ) {
                                                                await $ctx.supabaseMutation.upsert(
                                                                  {
                                                                    table:
                                                                      "payments",
                                                                    upsertValues:
                                                                      [
                                                                        {
                                                                          id: payment.id,
                                                                          checkedAdults:
                                                                            payment.checkedAdults +
                                                                            1
                                                                        }
                                                                      ]
                                                                  }
                                                                );
                                                              } else {
                                                                await $ctx.supabaseMutation.upsert(
                                                                  {
                                                                    table:
                                                                      "payments",
                                                                    upsertValues:
                                                                      [
                                                                        {
                                                                          id: payment.id,
                                                                          checkedKids:
                                                                            payment.checkedKids +
                                                                            1
                                                                        }
                                                                      ]
                                                                  }
                                                                );
                                                              }
                                                            })();
                                                          }
                                                      };
                                                      return (({
                                                        customFunction
                                                      }) => {
                                                        return customFunction();
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  typeof $steps["runCode"] ===
                                                    "object" &&
                                                  typeof $steps["runCode"]
                                                    .then === "function"
                                                ) {
                                                  $steps["runCode"] =
                                                    await $steps["runCode"];
                                                }

                                                $steps["refreshData"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        queryInvalidation: [
                                                          "plasmic_refresh_all"
                                                        ]
                                                      };
                                                      return (async ({
                                                        queryInvalidation
                                                      }) => {
                                                        if (
                                                          !queryInvalidation
                                                        ) {
                                                          return;
                                                        }
                                                        await plasmicInvalidate(
                                                          queryInvalidation
                                                        );
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  typeof $steps[
                                                    "refreshData"
                                                  ] === "object" &&
                                                  typeof $steps["refreshData"]
                                                    .then === "function"
                                                ) {
                                                  $steps["refreshData"] =
                                                    await $steps["refreshData"];
                                                }
                                              }}
                                            >
                                              {"CONFIRMAR CHECK-IN"}
                                            </Button>
                                          </p.Stack>
                                        );
                                      }
                                    )}
                                  </div>
                                );
                              })}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__crsXn
                                )}
                              >
                                {"Check-in realizados"}
                              </div>
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__wfIwc
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__jNuLu
                                  )}
                                >
                                  {"Adultos:"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___9Vn51
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $ctx.supabase[0].checkedAdults;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </p.Stack>
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___0FBmq
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___2BkrI
                                  )}
                                >
                                  {"Crian\u00e7as"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__tIc0
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $ctx.supabase[0].checkedKids;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </p.Stack>
                            </p.Stack>
                          )}
                        </ph.DataCtxReader>
                      </SupabaseFetcher>
                    )}
                  </ph.DataCtxReader>
                </SupabaseFetcher>
              )}
            </ph.DataCtxReader>
          </SupabaseMutation>
          <Button
            className={classNames("__wab_instance", sty.button__uDlM)}
            link={(() => {
              try {
                return $ctx.query.backUrl ?? "/admin";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            {"Voltar"}
          </Button>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "responsiveMenu", "supabaseMutation"],
  responsiveMenu: ["responsiveMenu"],
  supabaseMutation: ["supabaseMutation"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  responsiveMenu: typeof ResponsiveMenu;
  supabaseMutation: typeof SupabaseMutation;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIngresso__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIngresso__VariantsArgs;
    args?: PlasmicIngresso__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIngresso__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicIngresso__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicIngresso__ArgProps,
          internalVariantPropNames: PlasmicIngresso__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIngresso__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIngresso";
  } else {
    func.displayName = `PlasmicIngresso.${nodeName}`;
  }
  return func;
}

export const PlasmicIngresso = Object.assign(
  // Top-level PlasmicIngresso renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    responsiveMenu: makeNodeComponent("responsiveMenu"),
    supabaseMutation: makeNodeComponent("supabaseMutation"),

    // Metadata about props expected for PlasmicIngresso
    internalVariantProps: PlasmicIngresso__VariantProps,
    internalArgProps: PlasmicIngresso__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIngresso;
/* prettier-ignore-end */
