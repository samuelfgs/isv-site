// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4F6Va19MyMHcyNpURbn1mE
// Component: eNYeTR37wRs-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ResponsiveMenu from "../../ResponsiveMenu"; // plasmic-import: EjDwpL97hh/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponent
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponentHelper
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: EYHwZh9ILg/codeComponent
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponent
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponentHelper
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: RW4q13RFtAd/codeComponent
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: RW4q13RFtAd/codeComponentHelper
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent
import Button from "../../Button"; // plasmic-import: 7rzM78mJWkH/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: 7GMXgnERt-hcm/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic_imported_dep_5.module.css"; // plasmic-import: 49wF7zG85s5BmUvuzSq52Y/projectcss
import plasmic_antd_5_hostless_2_css from "../imported_dep_2/plasmic_imported_dep_2.module.css"; // plasmic-import: cyCPZA1r7cMAVZTG2fBKop/projectcss
import plasmic_antd_5_hostless_3_css from "../imported_dep_8/plasmic_imported_dep_8.module.css"; // plasmic-import: h6N5thS3BWDmJSDYSW7aei/projectcss
import plasmic_antd_5_hostless_4_css from "../imported_dep_11/plasmic_imported_dep_11.module.css"; // plasmic-import: 2xrkvoGMeCr8HmCJeU43qJ/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic_imported_dep_4.module.css"; // plasmic-import: hPAx2Po3YSE2fzFsJw5Trv/projectcss
import projectcss from "./plasmic_a_d_5.module.css"; // plasmic-import: 4F6Va19MyMHcyNpURbn1mE/projectcss
import sty from "./PlasmicCheckIn2.module.css"; // plasmic-import: eNYeTR37wRs-/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: DFUukaBqwOq/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: fpqx2Qlomeq/icon

createPlasmicElementProxy;

export type PlasmicCheckIn2__VariantMembers = {};
export type PlasmicCheckIn2__VariantsArgs = {};
type VariantPropType = keyof PlasmicCheckIn2__VariantsArgs;
export const PlasmicCheckIn2__VariantProps = new Array<VariantPropType>();

export type PlasmicCheckIn2__ArgsType = {
  user?: string;
  password?: string;
  onLogin?: () => void;
  skipLogin?: boolean;
};
type ArgPropType = keyof PlasmicCheckIn2__ArgsType;
export const PlasmicCheckIn2__ArgProps = new Array<ArgPropType>(
  "user",
  "password",
  "onLogin",
  "skipLogin"
);

export type PlasmicCheckIn2__OverridesType = {
  root?: p.Flex<"div">;
  responsiveMenu?: p.Flex<typeof ResponsiveMenu>;
  form?: p.Flex<typeof FormWrapper>;
  input?: p.Flex<typeof AntdInput>;
  passwordInput?: p.Flex<typeof AntdPassword>;
};

export interface DefaultCheckIn2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCheckIn2__RenderFunc(props: {
  variants: PlasmicCheckIn2__VariantsArgs;
  args: PlasmicCheckIn2__ArgsType;
  overrides: PlasmicCheckIn2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          user: "admin",
          password: "admin",
          skipLogin: false
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: p.generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdPassword_Helpers)
      },
      {
        path: "failed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "logged",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "generated",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "du8jW5s7JnVfk4bHYp38RF",
        opId: "0c4558b6-f10a-4aee-a125-cf60e1dadc7b",
        userArgs: {},
        cacheKey: `plasmic.$.0c4558b6-f10a-4aee-a125-cf60e1dadc7b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_antd_5_hostless_2_css.plasmic_tokens,
            plasmic_antd_5_hostless_3_css.plasmic_tokens,
            plasmic_antd_5_hostless_4_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <ResponsiveMenu
            data-plasmic-name={"responsiveMenu"}
            data-plasmic-override={overrides.responsiveMenu}
            className={classNames("__wab_instance", sty.responsiveMenu)}
          />

          {(() => {
            try {
              return !$state.logged;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__ph0Aw)}>
              <div className={classNames(projectcss.all, sty.freeBox__rpLgw)}>
                {(() => {
                  try {
                    return $state.failed;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wm0Qb
                    )}
                  >
                    {"Usu\u00e1rio ou senha incorretos"}
                  </div>
                ) : null}
              </div>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form),
                  extendedOnValuesChange: async (...eventArgs: any) => {
                    p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                    (async (changedValues, allValues) => {
                      const $steps = {};

                      $steps["updateFailed"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["failed"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              p.set(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        typeof $steps["updateFailed"] === "object" &&
                        typeof $steps["updateFailed"].then === "function"
                      ) {
                        $steps["updateFailed"] = await $steps["updateFailed"];
                      }
                    }).apply(null, eventArgs);
                  },
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  onFinish: async values => {
                    const $steps = {};

                    $steps["updateFailed"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["failed"]
                            },
                            operation: 0,
                            value:
                              $state.form.value.user !== $props.user ||
                              $state.form.value.password !== $props.password
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      typeof $steps["updateFailed"] === "object" &&
                      typeof $steps["updateFailed"].then === "function"
                    ) {
                      $steps["updateFailed"] = await $steps["updateFailed"];
                    }

                    $steps["updateLogged"] = !$steps.updateFailed
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["logged"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      typeof $steps["updateLogged"] === "object" &&
                      typeof $steps["updateLogged"].then === "function"
                    ) {
                      $steps["updateLogged"] = await $steps["updateLogged"];
                    }

                    $steps["runOnLogin"] = true
                      ? (() => {
                          const actionArgs = { eventRef: $props["onLogin"] };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      typeof $steps["runOnLogin"] === "object" &&
                      typeof $steps["runOnLogin"].then === "function"
                    ) {
                      $steps["runOnLogin"] = await $steps["runOnLogin"];
                    }
                  },
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  submitSlot: null,
                  validateTrigger: ["onSubmit"],
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                p.initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form.value"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__flctr
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__esnE5
                          )}
                        >
                          {"Usuario"}
                        </div>
                      }
                      name={"user"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input", "value"],
                              AntdInput_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__kmQ3R
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bji0M
                          )}
                        >
                          {"Senha"}
                        </div>
                      }
                      name={"password"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.passwordInput
                          ),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["passwordInput", "value"],
                              AntdPassword_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "passwordInput",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "passwordInput.value"
                            }
                          ],
                          [],
                          AntdPassword_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdPassword
                            data-plasmic-name={"passwordInput"}
                            data-plasmic-override={overrides.passwordInput}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lpkin)}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__gaJsU
                        )}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kdoUb
                          )}
                        >
                          {"Entrar"}
                        </div>
                      </AntdButton>
                    </div>
                  </FormWrapper>
                );
              })()}
            </div>
          ) : null}
          <Button
            className={classNames("__wab_instance", sty.button___3CbIb)}
            onClick={async event => {
              const $steps = {};

              $steps["updateGenerated"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["generated"]
                      },
                      operation: 0,
                      value: Math.floor(
                        Math.random() * $queries.query.data.length
                      )
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      p.set(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                typeof $steps["updateGenerated"] === "object" &&
                typeof $steps["updateGenerated"].then === "function"
              ) {
                $steps["updateGenerated"] = await $steps["updateGenerated"];
              }
            }}
          >
            {"SORTEAR"}
          </Button>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qpn4J
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $queries.query.data[$state.generated].id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tahIm
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $queries.query.data[$state.generated].name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "responsiveMenu", "form", "input", "passwordInput"],
  responsiveMenu: ["responsiveMenu"],
  form: ["form", "input", "passwordInput"],
  input: ["input"],
  passwordInput: ["passwordInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  responsiveMenu: typeof ResponsiveMenu;
  form: typeof FormWrapper;
  input: typeof AntdInput;
  passwordInput: typeof AntdPassword;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCheckIn2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCheckIn2__VariantsArgs;
    args?: PlasmicCheckIn2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCheckIn2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCheckIn2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCheckIn2__ArgProps,
          internalVariantPropNames: PlasmicCheckIn2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCheckIn2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCheckIn2";
  } else {
    func.displayName = `PlasmicCheckIn2.${nodeName}`;
  }
  return func;
}

export const PlasmicCheckIn2 = Object.assign(
  // Top-level PlasmicCheckIn2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    responsiveMenu: makeNodeComponent("responsiveMenu"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    passwordInput: makeNodeComponent("passwordInput"),

    // Metadata about props expected for PlasmicCheckIn2
    internalVariantProps: PlasmicCheckIn2__VariantProps,
    internalArgProps: PlasmicCheckIn2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCheckIn2;
/* prettier-ignore-end */
