// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4F6Va19MyMHcyNpURbn1mE
// Component: u2RfaeKZwHdY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ResponsiveMenu from "../../ResponsiveMenu"; // plasmic-import: EjDwpL97hh/component
import Button from "../../Button"; // plasmic-import: 7rzM78mJWkH/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: 7GMXgnERt-hcm/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic_imported_dep_5.module.css"; // plasmic-import: 49wF7zG85s5BmUvuzSq52Y/projectcss
import plasmic_antd_5_hostless_2_css from "../imported_dep_2/plasmic_imported_dep_2.module.css"; // plasmic-import: cyCPZA1r7cMAVZTG2fBKop/projectcss
import plasmic_antd_5_hostless_3_css from "../imported_dep_8/plasmic_imported_dep_8.module.css"; // plasmic-import: h6N5thS3BWDmJSDYSW7aei/projectcss
import plasmic_antd_5_hostless_4_css from "../imported_dep_11/plasmic_imported_dep_11.module.css"; // plasmic-import: 2xrkvoGMeCr8HmCJeU43qJ/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic_imported_dep_4.module.css"; // plasmic-import: hPAx2Po3YSE2fzFsJw5Trv/projectcss
import projectcss from "./plasmic_a_d_5.module.css"; // plasmic-import: 4F6Va19MyMHcyNpURbn1mE/projectcss
import sty from "./PlasmicCheckIn.module.css"; // plasmic-import: u2RfaeKZwHdY/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: DFUukaBqwOq/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: fpqx2Qlomeq/icon

createPlasmicElementProxy;

export type PlasmicCheckIn__VariantMembers = {};
export type PlasmicCheckIn__VariantsArgs = {};
type VariantPropType = keyof PlasmicCheckIn__VariantsArgs;
export const PlasmicCheckIn__VariantProps = new Array<VariantPropType>();

export type PlasmicCheckIn__ArgsType = {};
type ArgPropType = keyof PlasmicCheckIn__ArgsType;
export const PlasmicCheckIn__ArgProps = new Array<ArgPropType>();

export type PlasmicCheckIn__OverridesType = {
  root?: p.Flex<"div">;
  responsiveMenu?: p.Flex<typeof ResponsiveMenu>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultCheckInProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCheckIn__RenderFunc(props: {
  variants: PlasmicCheckIn__VariantsArgs;
  args: PlasmicCheckIn__ArgsType;
  overrides: PlasmicCheckIn__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    inscricao: usePlasmicDataOp(() => {
      return {
        sourceId: "du8jW5s7JnVfk4bHYp38RF",
        opId: "30229dd8-44cf-40bc-835e-3576095a3349",
        userArgs: {
          filters: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.30229dd8-44cf-40bc-835e-3576095a3349.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    payment: usePlasmicDataOp(() => {
      return {
        sourceId: "du8jW5s7JnVfk4bHYp38RF",
        opId: "8023b1d3-864b-4cc9-b64b-9faa8a4a7cb7",
        userArgs: {
          query: [$ctx.params.id, $ctx.params.id]
        },
        cacheKey: `plasmic.$.8023b1d3-864b-4cc9-b64b-9faa8a4a7cb7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_antd_5_hostless_2_css.plasmic_tokens,
            plasmic_antd_5_hostless_3_css.plasmic_tokens,
            plasmic_antd_5_hostless_4_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <ResponsiveMenu
            data-plasmic-name={"responsiveMenu"}
            data-plasmic-override={overrides.responsiveMenu}
            className={classNames("__wab_instance", sty.responsiveMenu)}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kbOrY)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mf9Ac
              )}
            >
              {"Inscri\u00e7\u00e3o"}
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $queries.payment.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const payment = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__chFNj)}
                  key={currentIndex}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $queries.inscricao.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_1, __plasmic_idx_1) => {
                    const inscricao = __plasmic_item_1;
                    const currentIndex = __plasmic_idx_1;
                    return (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jwgwc
                        )}
                        key={currentIndex}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nu37W
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3WWJt
                            )}
                          >
                            {"C\u00f3digo de inscri\u00e7\u00e3o:"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yaSDh
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return inscricao.id;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </p.Stack>
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bOr4F
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ax4Gk
                            )}
                          >
                            {"Nome:"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__o0MHq
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return inscricao.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </p.Stack>
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ymcqh
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dseoS
                            )}
                          >
                            {"CPF:"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__suRpF
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return inscricao.cpf;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </p.Stack>
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nPohA
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zAtDz
                            )}
                          >
                            {"Adultos:"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8PTht
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return payment.adults;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </p.Stack>
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hYq3G
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mgWte
                            )}
                          >
                            {"Crian\u00e7as"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tbfyq
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return payment.kids;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </p.Stack>
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__k7JMb
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5MCrn
                            )}
                          >
                            {"Ingresso"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ngFzx
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return inscricao.ticket_type == "saturday"
                                    ? "SOMENTE SÁBADO"
                                    : inscricao.ticket_type == "sunday"
                                    ? "SOMENTE DOMINGO"
                                    : "DOIS DIAS";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </p.Stack>
                        <Button
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          isDisabled={(() => {
                            try {
                              return (() => {
                                const payment = $queries.payment.data[0];
                                const total = payment.adults + payment.kids;
                                const checked =
                                  payment.checkedAdults + payment.checkedKids;
                                return checked >= total;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          onClick={async event => {
                            const $steps = {};

                            $steps["checkAdult"] =
                              $queries.payment.data[0].checkedAdults <
                              $queries.payment.data[0].adults
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "du8jW5s7JnVfk4bHYp38RF",
                                        opId: "07b23ebd-b3a0-4cd6-985e-764260124114",
                                        userArgs: {
                                          keys: [$queries.payment.data[0].id],
                                          variables: [
                                            $queries.payment.data[0]
                                              .checkedAdults + 1
                                          ]
                                        },
                                        cacheKey: `plasmic.$.07b23ebd-b3a0-4cd6-985e-764260124114.$.`,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              typeof $steps["checkAdult"] === "object" &&
                              typeof $steps["checkAdult"].then === "function"
                            ) {
                              $steps["checkAdult"] = await $steps["checkAdult"];
                            }

                            $steps["checkKid"] = !$steps.checkAdult
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "du8jW5s7JnVfk4bHYp38RF",
                                      opId: "2d2f6a73-54f6-48b8-87c5-167d925512bc",
                                      userArgs: {
                                        keys: [$queries.payment.data[0].id],
                                        variables: [
                                          $queries.payment.data[0].checkedKids +
                                            1
                                        ]
                                      },
                                      cacheKey: `plasmic.$.2d2f6a73-54f6-48b8-87c5-167d925512bc.$.`,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              typeof $steps["checkKid"] === "object" &&
                              typeof $steps["checkKid"].then === "function"
                            ) {
                              $steps["checkKid"] = await $steps["checkKid"];
                            }
                          }}
                        >
                          {"CONFIRMAR CHECK-IN"}
                        </Button>
                      </p.Stack>
                    );
                  })}
                </div>
              );
            })}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zjLef
              )}
            >
              {"Check-in realizados"}
            </div>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___0Wb9E)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ounD
                )}
              >
                {"Adultos:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xmKkl
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.payment.data[0].checkedAdults;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__slue)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jL4Wv
                )}
              >
                {"Crian\u00e7as"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aTJq9
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.payment.data[0].checkedKids;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "responsiveMenu", "button"],
  responsiveMenu: ["responsiveMenu"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  responsiveMenu: typeof ResponsiveMenu;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCheckIn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCheckIn__VariantsArgs;
    args?: PlasmicCheckIn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCheckIn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCheckIn__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCheckIn__ArgProps,
          internalVariantPropNames: PlasmicCheckIn__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCheckIn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCheckIn";
  } else {
    func.displayName = `PlasmicCheckIn.${nodeName}`;
  }
  return func;
}

export const PlasmicCheckIn = Object.assign(
  // Top-level PlasmicCheckIn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    responsiveMenu: makeNodeComponent("responsiveMenu"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicCheckIn
    internalVariantProps: PlasmicCheckIn__VariantProps,
    internalArgProps: PlasmicCheckIn__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCheckIn;
/* prettier-ignore-end */
