// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4F6Va19MyMHcyNpURbn1mE
// Component: qPb5MDxDszRV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: K-mWGqrHefEp/codeComponent
import ResponsiveMenu from "../../ResponsiveMenu"; // plasmic-import: EjDwpL97hh/component
import Button from "../../Button"; // plasmic-import: 7rzM78mJWkH/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: 7GMXgnERt-hcm/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic_imported_dep_5.module.css"; // plasmic-import: 49wF7zG85s5BmUvuzSq52Y/projectcss
import plasmic_antd_5_hostless_2_css from "../imported_dep_2/plasmic_imported_dep_2.module.css"; // plasmic-import: cyCPZA1r7cMAVZTG2fBKop/projectcss
import plasmic_antd_5_hostless_3_css from "../imported_dep_8/plasmic_imported_dep_8.module.css"; // plasmic-import: h6N5thS3BWDmJSDYSW7aei/projectcss
import plasmic_antd_5_hostless_4_css from "../imported_dep_11/plasmic_imported_dep_11.module.css"; // plasmic-import: 2xrkvoGMeCr8HmCJeU43qJ/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic_imported_dep_4.module.css"; // plasmic-import: hPAx2Po3YSE2fzFsJw5Trv/projectcss
import projectcss from "./plasmic_a_d_5.module.css"; // plasmic-import: 4F6Va19MyMHcyNpURbn1mE/projectcss
import sty from "./PlasmicCortesia.module.css"; // plasmic-import: qPb5MDxDszRV/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: DFUukaBqwOq/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: fpqx2Qlomeq/icon

createPlasmicElementProxy;

export type PlasmicCortesia__VariantMembers = {};
export type PlasmicCortesia__VariantsArgs = {};
type VariantPropType = keyof PlasmicCortesia__VariantsArgs;
export const PlasmicCortesia__VariantProps = new Array<VariantPropType>();

export type PlasmicCortesia__ArgsType = {};
type ArgPropType = keyof PlasmicCortesia__ArgsType;
export const PlasmicCortesia__ArgProps = new Array<ArgPropType>();

export type PlasmicCortesia__OverridesType = {
  root?: p.Flex<"div">;
  sideEffect?: p.Flex<typeof SideEffect>;
  responsiveMenu?: p.Flex<typeof ResponsiveMenu>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultCortesiaProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCortesia__RenderFunc(props: {
  variants: PlasmicCortesia__VariantsArgs;
  args: PlasmicCortesia__ArgsType;
  overrides: PlasmicCortesia__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "du8jW5s7JnVfk4bHYp38RF",
        opId: "20b4dd95-ebd9-4d99-b11f-c118d9725c6b",
        userArgs: {},
        cacheKey: `plasmic.$.20b4dd95-ebd9-4d99-b11f-c118d9725c6b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_antd_5_hostless_2_css.plasmic_tokens,
            plasmic_antd_5_hostless_3_css.plasmic_tokens,
            plasmic_antd_5_hostless_4_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["goToHomepage"] = true
                ? (() => {
                    const actionArgs = { destination: `/` };
                    return (({ destination }) => {
                      __nextRouter?.push(destination);
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                typeof $steps["goToHomepage"] === "object" &&
                typeof $steps["goToHomepage"].then === "function"
              ) {
                $steps["goToHomepage"] = await $steps["goToHomepage"];
              }
            }}
          />

          <ResponsiveMenu
            data-plasmic-name={"responsiveMenu"}
            data-plasmic-override={overrides.responsiveMenu}
            className={classNames("__wab_instance", sty.responsiveMenu)}
          />

          <div className={classNames(projectcss.all, sty.freeBox___5MnoI)}>
            {(() => {
              try {
                return $queries.query.data.find(
                  row => row.id === $ctx.params.id
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__msm2T
                )}
              >
                {"Check-in j\u00e1 realizado"}
              </div>
            ) : null}
          </div>
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            isDisabled={(() => {
              try {
                return $queries.query.data.find(
                  row => row.id === $ctx.params.id
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            onClick={async event => {
              const $steps = {};

              $steps["postgresCreate"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "du8jW5s7JnVfk4bHYp38RF",
                        opId: "10d1a668-aee6-4af3-8795-0f16ff2153d8",
                        userArgs: {
                          variables: [$ctx.params.id]
                        },
                        cacheKey: `plasmic.$.10d1a668-aee6-4af3-8795-0f16ff2153d8.$.`,
                        invalidatedKeys: ["plasmic_refresh_all"],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                typeof $steps["postgresCreate"] === "object" &&
                typeof $steps["postgresCreate"].then === "function"
              ) {
                $steps["postgresCreate"] = await $steps["postgresCreate"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__quazd
              )}
            >
              {"CONFIRMAR CORTESIA"}
            </div>
          </Button>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__yqxgQ)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__puYnM
              )}
            >
              {"Total de cortesias"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ftuly
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $queries.query.data.length;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Total de cortesias";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sideEffect", "responsiveMenu", "button"],
  sideEffect: ["sideEffect"],
  responsiveMenu: ["responsiveMenu"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  responsiveMenu: typeof ResponsiveMenu;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCortesia__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCortesia__VariantsArgs;
    args?: PlasmicCortesia__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCortesia__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCortesia__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCortesia__ArgProps,
          internalVariantPropNames: PlasmicCortesia__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCortesia__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCortesia";
  } else {
    func.displayName = `PlasmicCortesia.${nodeName}`;
  }
  return func;
}

export const PlasmicCortesia = Object.assign(
  // Top-level PlasmicCortesia renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    responsiveMenu: makeNodeComponent("responsiveMenu"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicCortesia
    internalVariantProps: PlasmicCortesia__VariantProps,
    internalArgProps: PlasmicCortesia__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCortesia;
/* prettier-ignore-end */
