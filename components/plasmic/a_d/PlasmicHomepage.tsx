// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adjLdLRA7wsoKYbMFGbDTh
// Component: EhA9mUBKziYx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 7rzM78mJWkH/component
import ResponsiveMenu from "../../ResponsiveMenu"; // plasmic-import: EjDwpL97hh/component
import Video from "../../code-components/Video"; // plasmic-import: ApNITBkBYT/codeComponent
import InscricaoButton from "../../InscricaoButton"; // plasmic-import: VrYzW9MhJk/component
import { Participantes } from "../../code-components/Parallax"; // plasmic-import: rVe2Ib6zMg/codeComponent
import PalestrantesData from "../../PalestrantesData"; // plasmic-import: PXPe8ME1DQ/component
import Palestrante from "../../Palestrante"; // plasmic-import: 5UuQ-pHvfY/component

import { useScreenVariants as useScreenVariantsdu4QaJy8Zhmfq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Du4QaJY8zhmfq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../copy_of_plasmic_kit_q_4_color_tokens/plasmic_copy_of_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: r6wqTHP8pUBDqvkAaarh3E/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_color_tokens/plasmic_plasmic_kit_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_a_d.module.css"; // plasmic-import: adjLdLRA7wsoKYbMFGbDTh/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: EhA9mUBKziYx/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: DFUukaBqwOq/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: fpqx2Qlomeq/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
  responsiveMenu?: p.Flex<typeof ResponsiveMenu>;
  htmlVideo?: p.Flex<typeof Video>;
  inscricaoButton?: p.Flex<typeof InscricaoButton>;
  participantes?: p.Flex<typeof Participantes>;
  palestrantesData?: p.Flex<typeof PalestrantesData>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdu4QaJy8Zhmfq()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__eDpuD)}
          >
            {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
              <div className={classNames(projectcss.all, sty.freeBox__l7KFk)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5Qfn8)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jL64G
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "tablet")
                        ? "Dias 21 e 22 de outubro"
                        : "21 e 22"}
                    </div>
                    {(
                      hasVariant(globalVariants, "screen", "tablet")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___66Sof
                        )}
                      >
                        {"Outubro"}
                      </div>
                    ) : null}
                  </div>
                ) : null}
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  link={`/inscricao`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eJtZ
                    )}
                  >
                    {"QUERO ME INSCREVER"}
                  </div>
                </Button>
              </div>
            ) : null}
          </p.Stack>
          {true ? (
            <ResponsiveMenu
              data-plasmic-name={"responsiveMenu"}
              data-plasmic-override={overrides.responsiveMenu}
              className={classNames("__wab_instance", sty.responsiveMenu)}
            />
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__kUlCm)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___1S6OG)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"80%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("500px" as const)
                    : ("auto" as const)
                }
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/a_d/images/ad20AnosIcon211Png.png",
                  fullWidth: 3666,
                  fullHeight: 2547,
                  aspectRatio: undefined
                }}
              />

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__sMAat)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fYk58
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "tablet")
                      ? "Vamos celebrar os 20 anos de Adoração e Discipulado"
                      : "Vamos celebrar os \n20 anos de \nAdoração e Discipulado"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2U7OO
                    )}
                  >
                    {"E você pode fazer parte disso! "}
                  </div>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__d712)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sE7Vb
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "tablet")
                      ? "Dias 21 e 22 de outubro"
                      : "21 e 22 de outubro"}
                  </div>
                </p.Stack>
              ) : null}
              <Video
                data-plasmic-name={"htmlVideo"}
                data-plasmic-override={overrides.htmlVideo}
                autoPlay={true}
                className={classNames("__wab_instance", sty.htmlVideo)}
                controls={false}
                loop={true}
                muted={true}
                src={"https://isv-site.vercel.app/video.mp4" as const}
              />

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mQpkc)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j4F9
                    )}
                  >
                    {"VOCÊ FAZ PARTE DISSO!"}
                  </div>
                  <InscricaoButton
                    data-plasmic-name={"inscricaoButton"}
                    data-plasmic-override={overrides.inscricaoButton}
                    className={classNames(
                      "__wab_instance",
                      sty.inscricaoButton
                    )}
                  />
                </p.Stack>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "tablet") ? true : true
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__neaTo
                  )}
                >
                  {"PALESTRANTES"}
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop")
                  ? true
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__hazcD)}>
                  <Participantes
                    data-plasmic-name={"participantes"}
                    data-plasmic-override={overrides.participantes}
                    className={classNames("__wab_instance", sty.participantes)}
                  />
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop")
                  ? true
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : true
              ) ? (
                <PalestrantesData
                  data-plasmic-name={"palestrantesData"}
                  data-plasmic-override={overrides.palestrantesData}
                  className={classNames("__wab_instance", sty.palestrantesData)}
                >
                  <ph.DataCtxReader>
                    {$ctx =>
                      true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__x3T27
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aQ01E
                            )}
                          >
                            {"Palestrantes"}
                          </div>
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___9ZBgO
                              )}
                            >
                              {(
                                (() => {
                                  try {
                                    return $ctx.palestrantes.slice(0, 3);
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })() ?? []
                              ).map((currentItem, currentIndex) => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__z7E7A
                                  )}
                                  key={currentIndex}
                                >
                                  <Palestrante
                                    className={classNames(
                                      "__wab_instance",
                                      sty.palestrante___9VLy5
                                    )}
                                    slot={
                                      (
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "tablet"
                                        )
                                          ? true
                                          : true
                                      ) ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__gjJDo
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__xfh2M
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.name;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "Adhemar de Campos";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      ) : null
                                    }
                                    slot2={
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.shortDesc;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Autor de aproximadamente 1000 canções, Pr. Adhemar de Campos é um dos mais notórios ministros de louvor e adoração no Brasil, dedicando sua vida a compor canções que ajudam muitos a experimentarem a presença de Deus de um modo profundo. Em 1985 gravou seu primeiro LP e em 1987, num pioneirismo ímpar, realizou a primeira gravação ao vivo de músicas cristãs. Sua história confunde-se com a da música gospel no Brasil, tanto que na década de 80 era um dos poucos produtores de cânticos cristãos com grande projeção. Seu ministério influenciou gerações com composições atemporais que até hoje nos tocam, oferecendo valores de uma vida cristã verdadeira. São mais de 45 anos de caminhada com Cristo, claramente perceptíveis no conjunto de sua obra.";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    }
                                  >
                                    <p.PlasmicImg
                                      alt={""}
                                      className={classNames(sty.img___7Wu7N)}
                                      displayHeight={"100%" as const}
                                      displayMaxHeight={"none" as const}
                                      displayMaxWidth={"100%" as const}
                                      displayMinHeight={"0" as const}
                                      displayMinWidth={"0" as const}
                                      displayWidth={"200px" as const}
                                      loading={"lazy" as const}
                                      src={(() => {
                                        try {
                                          return `/${currentItem.name}.png`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "https://site-assets.plasmic.app/6e4631f76206fbc89126315336d4e59c.png";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    />
                                  </Palestrante>
                                </div>
                              ))}
                            </div>
                          ) : null}
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__heIkn
                              )}
                            >
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ndmSt
                                  )}
                                >
                                  {(
                                    (() => {
                                      try {
                                        return $ctx.palestrantes.slice(3);
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })() ?? []
                                  ).map((currentItem, currentIndex) => (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__u69OZ
                                      )}
                                      key={currentIndex}
                                    >
                                      <Palestrante
                                        className={classNames(
                                          "__wab_instance",
                                          sty.palestrante___2QivX
                                        )}
                                        slot={
                                          (
                                            hasVariant(
                                              globalVariants,
                                              "screen",
                                              "tablet"
                                            )
                                              ? true
                                              : true
                                          ) ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__wmsF
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__z6X3N
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem.name;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "Adhemar de Campos";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </div>
                                          ) : null
                                        }
                                        slot2={
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.shortDesc;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Autor de aproximadamente 1000 canções, Pr. Adhemar de Campos é um dos mais notórios ministros de louvor e adoração no Brasil, dedicando sua vida a compor canções que ajudam muitos a experimentarem a presença de Deus de um modo profundo. Em 1985 gravou seu primeiro LP e em 1987, num pioneirismo ímpar, realizou a primeira gravação ao vivo de músicas cristãs. Sua história confunde-se com a da música gospel no Brasil, tanto que na década de 80 era um dos poucos produtores de cânticos cristãos com grande projeção. Seu ministério influenciou gerações com composições atemporais que até hoje nos tocam, oferecendo valores de uma vida cristã verdadeira. São mais de 45 anos de caminhada com Cristo, claramente perceptíveis no conjunto de sua obra.";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        }
                                      >
                                        <p.PlasmicImg
                                          alt={""}
                                          className={classNames(
                                            sty.img___1CQcI
                                          )}
                                          displayHeight={"100%" as const}
                                          displayMaxHeight={"none" as const}
                                          displayMaxWidth={"100%" as const}
                                          displayMinHeight={"0" as const}
                                          displayMinWidth={"0" as const}
                                          displayWidth={"200px" as const}
                                          loading={"lazy" as const}
                                          src={(() => {
                                            try {
                                              return `/${currentItem.name}.png`;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "https://site-assets.plasmic.app/6e4631f76206fbc89126315336d4e59c.png";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        />
                                      </Palestrante>
                                    </div>
                                  ))}
                                </div>
                              ) : null}
                            </div>
                          ) : null}
                        </div>
                      ) : null
                    }
                  </ph.DataCtxReader>
                </PalestrantesData>
              ) : null}
            </p.Stack>
          ) : null}
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <div className={classNames(projectcss.all, sty.freeBox__gx8Eo)} />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "button",
    "responsiveMenu",
    "htmlVideo",
    "inscricaoButton",
    "participantes",
    "palestrantesData"
  ],
  button: ["button"],
  responsiveMenu: ["responsiveMenu"],
  htmlVideo: ["htmlVideo"],
  inscricaoButton: ["inscricaoButton"],
  participantes: ["participantes"],
  palestrantesData: ["palestrantesData"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
  responsiveMenu: typeof ResponsiveMenu;
  htmlVideo: typeof Video;
  inscricaoButton: typeof InscricaoButton;
  participantes: typeof Participantes;
  palestrantesData: typeof PalestrantesData;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    responsiveMenu: makeNodeComponent("responsiveMenu"),
    htmlVideo: makeNodeComponent("htmlVideo"),
    inscricaoButton: makeNodeComponent("inscricaoButton"),
    participantes: makeNodeComponent("participantes"),
    palestrantesData: makeNodeComponent("palestrantesData"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "AD20",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/82149cfdbb4813cc0398b4e443013c4b.png",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
