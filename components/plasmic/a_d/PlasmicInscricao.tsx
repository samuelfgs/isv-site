// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: adjLdLRA7wsoKYbMFGbDTh
// Component: dYFvLDGEBe

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ResponsiveMenu from "../../ResponsiveMenu"; // plasmic-import: EjDwpL97hh/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponent
import { FormProvider } from "../../code-components/FormProvider"; // plasmic-import: gzu14pntqz/codeComponent
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: EYHwZh9ILg/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: nehhorfRRWX/component
import { FormGroup } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: zEXrWX9naj/codeComponent
import Button from "../../Button"; // plasmic-import: 7rzM78mJWkH/component
import { DataProvider } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: D4RbnlpRXg3/codeComponent
import Loading from "../../Loading"; // plasmic-import: Of-Yy5_cNa/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: 7GMXgnERt-hcm/codeComponent

import { useScreenVariants as useScreenVariantsdu4QaJy8Zhmfq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Du4QaJY8zhmfq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../copy_of_plasmic_kit_q_4_color_tokens/plasmic_copy_of_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: r6wqTHP8pUBDqvkAaarh3E/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../plasmic_kit_color_tokens/plasmic_plasmic_kit_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "./plasmic_a_d.module.css"; // plasmic-import: adjLdLRA7wsoKYbMFGbDTh/projectcss
import sty from "./PlasmicInscricao.module.css"; // plasmic-import: dYFvLDGEBe/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: rlqzA49ld7A/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: DFUukaBqwOq/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: fpqx2Qlomeq/icon
import EditIcon from "./icons/PlasmicIcon__Edit"; // plasmic-import: Z2RuvoByA/icon
import CloseIcon from "./icons/PlasmicIcon__Close"; // plasmic-import: 9oEdsaHjf/icon
import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: 4oCsOVXfC/icon

export type PlasmicInscricao__VariantMembers = {};
export type PlasmicInscricao__VariantsArgs = {};
type VariantPropType = keyof PlasmicInscricao__VariantsArgs;
export const PlasmicInscricao__VariantProps = new Array<VariantPropType>();

export type PlasmicInscricao__ArgsType = {
  inscritosx?: any;
};
type ArgPropType = keyof PlasmicInscricao__ArgsType;
export const PlasmicInscricao__ArgProps = new Array<ArgPropType>("inscritosx");

export type PlasmicInscricao__OverridesType = {
  root?: p.Flex<"div">;
  responsiveMenu?: p.Flex<typeof ResponsiveMenu>;
  form?: p.Flex<typeof FormWrapper>;
  formProvider?: p.Flex<typeof FormProvider>;
  input?: p.Flex<typeof TextInput>;
  input2?: p.Flex<typeof TextInput>;
  input4?: p.Flex<typeof TextInput>;
  formFieldGroup?: p.Flex<typeof FormGroup>;
  input13?: p.Flex<typeof TextInput>;
  input18?: p.Flex<typeof TextInput>;
  input8?: p.Flex<typeof TextInput>;
  input9?: p.Flex<typeof TextInput>;
  input14?: p.Flex<typeof TextInput>;
  input15?: p.Flex<typeof TextInput>;
  input17?: p.Flex<typeof TextInput>;
  input16?: p.Flex<typeof TextInput>;
  input5?: p.Flex<typeof TextInput>;
  dataProvider?: p.Flex<typeof DataProvider>;
  loading?: p.Flex<typeof Loading>;
};

export interface DefaultInscricaoProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInscricao__RenderFunc(props: {
  variants: PlasmicInscricao__VariantsArgs;
  args: PlasmicInscricao__ArgsType;
  overrides: PlasmicInscricao__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          inscritosx: [
            {
              name: "Samuel Ferreira",
              birthdate: "24/06/1996",
              address: "adasdafds",
              cpf: "43529367826",
              telefone: "13997424001",
              email: "fgs.samuel@gmail.com"
            },
            {
              name: "Samuel Ferreira",
              birthdate: "24/06/1996",
              address: "adasdafds",
              cpf: "43529367826",
              telefone: "13997424001",
              email: "fgs.samuel@gmail.com"
            }
          ]
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "input13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "input14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "input15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "input16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "input17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "input18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "inscritos",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "inForm",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "selectedIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdu4QaJy8Zhmfq()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <ResponsiveMenu
            data-plasmic-name={"responsiveMenu"}
            data-plasmic-override={overrides.responsiveMenu}
            className={classNames("__wab_instance", sty.responsiveMenu)}
          />

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xEypm)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jLtot)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__umcng
                    )}
                  >
                    {"Inscrição"}
                  </div>
                  {(() => {
                    try {
                      return $state.inForm;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__m5J7F)}
                    >
                      <FormWrapper
                        data-plasmic-name={"form"}
                        data-plasmic-override={overrides.form}
                        className={classNames("__wab_instance", sty.form)}
                        colon={false}
                        extendedOnValuesChange={p.generateStateOnChangeProp(
                          $state,
                          ["form", "value"]
                        )}
                        formItems={[
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ]}
                        initialValues={(() => {
                          try {
                            return $state.selectedIndex !== undefined
                              ? $state.inscritos[$state.selectedIndex]
                              : $state.inscritos.length > 0
                              ? { address: $state.inscritos[0].address }
                              : {};
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        labelCol={(() => {
                          const __composite = {
                            span: null,
                            horizontalOnly: true
                          };
                          __composite["span"] = 6;
                          return __composite;
                        })()}
                        layout={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? ("inline" as const)
                            : ("vertical" as const)
                        }
                        mode={undefined}
                        onFinish={async values => {
                          const $steps = {};
                          $steps["updateInscritos2"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "customFunction",
                                      interactionUuid: "ouW2MWpQn",
                                      componentUuid: "dYFvLDGEBe",
                                      argName: "customFunction"
                                    },
                                    () => () => {
                                      if ($state.selectedIndex === undefined) {
                                        return $state.inscritos.push(
                                          $state.form.value
                                        );
                                      } else {
                                        return ($state.inscritos[
                                          $state.selectedIndex
                                        ] = $state.form.value);
                                      }
                                    }
                                  )
                                };
                                return __wrapUserFunction(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "customFunction",
                                    interactionUuid: "ouW2MWpQn",
                                    componentUuid: "dYFvLDGEBe"
                                  },
                                  () =>
                                    (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]),
                                  actionArgs
                                );
                              })()
                            : undefined;
                          if (
                            typeof $steps["updateInscritos2"] === "object" &&
                            typeof $steps["updateInscritos2"].then ===
                              "function"
                          ) {
                            $steps["updateInscritos2"] =
                              await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "customFunction",
                                  interactionUuid: "ouW2MWpQn",
                                  componentUuid: "dYFvLDGEBe"
                                },
                                $steps["updateInscritos2"]
                              );
                          }
                          $steps["updateInForm"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "Yz113sxvo",
                                      componentUuid: "dYFvLDGEBe",
                                      argName: "variable"
                                    },
                                    () => ({
                                      objRoot: $state,
                                      variablePath: ["inForm"]
                                    })
                                  ),
                                  operation: __wrapUserFunction(
                                    {
                                      type: "InteractionArgLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "Yz113sxvo",
                                      componentUuid: "dYFvLDGEBe",
                                      argName: "operation"
                                    },
                                    () => 4
                                  )
                                };
                                return __wrapUserFunction(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "updateVariable",
                                    interactionUuid: "Yz113sxvo",
                                    componentUuid: "dYFvLDGEBe"
                                  },
                                  () =>
                                    (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = p.get(
                                        objRoot,
                                        variablePath
                                      );
                                      p.set(objRoot, variablePath, !oldValue);
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]),
                                  actionArgs
                                );
                              })()
                            : undefined;
                          if (
                            typeof $steps["updateInForm"] === "object" &&
                            typeof $steps["updateInForm"].then === "function"
                          ) {
                            $steps["updateInForm"] = await __wrapUserPromise(
                              {
                                type: "InteractionLoc",
                                actionName: "updateVariable",
                                interactionUuid: "Yz113sxvo",
                                componentUuid: "dYFvLDGEBe"
                              },
                              $steps["updateInForm"]
                            );
                          }
                        }}
                        submitSlot={null}
                        wrapperCol={(() => {
                          const __composite = {
                            span: null,
                            horizontalOnly: true
                          };
                          __composite["span"] = 18;
                          return __composite;
                        })()}
                      >
                        <FormProvider
                          data-plasmic-name={"formProvider"}
                          data-plasmic-override={overrides.formProvider}
                          className={classNames(
                            "__wab_instance",
                            sty.formProvider
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lyJq
                            )}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__rm9Bf
                              )}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__lYhaA
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fKd6Y
                                    )}
                                  >
                                    {"Nome completo"}
                                  </div>
                                }
                                name={"name" as const}
                              >
                                <TextInput
                                  data-plasmic-name={"input"}
                                  data-plasmic-override={overrides.input}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.input
                                  )}
                                  onChange={(...eventArgs) => {
                                    p.generateStateOnChangeProp($state, [
                                      "input",
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  }}
                                  value={
                                    p.generateStateValueProp($state, [
                                      "input",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__sy5KZ
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__byIt9
                                    )}
                                  >
                                    {"Data de nascimento"}
                                  </div>
                                }
                                name={"birthdate" as const}
                              >
                                <TextInput
                                  data-plasmic-name={"input2"}
                                  data-plasmic-override={overrides.input2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.input2
                                  )}
                                  onChange={(...eventArgs) => {
                                    p.generateStateOnChangeProp($state, [
                                      "input2",
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  }}
                                  value={
                                    p.generateStateValueProp($state, [
                                      "input2",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__quT5
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__jzOrH
                                    )}
                                  >
                                    {"Documento de identidade"}
                                  </div>
                                }
                                name={"cpf" as const}
                              >
                                <TextInput
                                  data-plasmic-name={"input4"}
                                  data-plasmic-override={overrides.input4}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.input4
                                  )}
                                  onChange={(...eventArgs) => {
                                    p.generateStateOnChangeProp($state, [
                                      "input4",
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  }}
                                  value={
                                    p.generateStateValueProp($state, [
                                      "input4",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                              <FormGroup
                                data-plasmic-name={"formFieldGroup"}
                                data-plasmic-override={overrides.formFieldGroup}
                                className={classNames(
                                  "__wab_instance",
                                  sty.formFieldGroup
                                )}
                                name={"address" as const}
                              >
                                {true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__xmcbt
                                    )}
                                  >
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__qVfVl
                                      )}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__uLrKi
                                          )}
                                        >
                                          {"CEP"}
                                        </div>
                                      }
                                      name={"cep" as const}
                                    >
                                      <TextInput
                                        data-plasmic-name={"input13"}
                                        data-plasmic-override={
                                          overrides.input13
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.input13
                                        )}
                                        onBlur={async event => {
                                          const $steps = {};
                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction:
                                                    __wrapUserFunction(
                                                      {
                                                        type: "InteractionArgLoc",
                                                        actionName:
                                                          "customFunction",
                                                        interactionUuid:
                                                          "4vwqMn7U2",
                                                        componentUuid:
                                                          "dYFvLDGEBe",
                                                        argName:
                                                          "customFunction"
                                                      },
                                                      () => () => {
                                                        return (() => {
                                                          const cep =
                                                            $state.form.value
                                                              .address?.cep;
                                                          if (!cep) {
                                                            return;
                                                          }
                                                          if (
                                                            isNaN(+cep) ||
                                                            cep.length !== 8
                                                          ) {
                                                            return;
                                                          }
                                                          return ($state.isLoading =
                                                            true);
                                                        })();
                                                      }
                                                    )
                                                };
                                                return __wrapUserFunction(
                                                  {
                                                    type: "InteractionLoc",
                                                    actionName:
                                                      "customFunction",
                                                    interactionUuid:
                                                      "4vwqMn7U2",
                                                    componentUuid: "dYFvLDGEBe"
                                                  },
                                                  () =>
                                                    (({ customFunction }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]),
                                                  actionArgs
                                                );
                                              })()
                                            : undefined;
                                          if (
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] =
                                              await __wrapUserPromise(
                                                {
                                                  type: "InteractionLoc",
                                                  actionName: "customFunction",
                                                  interactionUuid: "4vwqMn7U2",
                                                  componentUuid: "dYFvLDGEBe"
                                                },
                                                $steps["runCode"]
                                              );
                                          }
                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction:
                                                    __wrapUserFunction(
                                                      {
                                                        type: "InteractionArgLoc",
                                                        actionName:
                                                          "customFunction",
                                                        interactionUuid:
                                                          "ZSh2qbbTe",
                                                        componentUuid:
                                                          "dYFvLDGEBe",
                                                        argName:
                                                          "customFunction"
                                                      },
                                                      () => () => {
                                                        return (async () => {
                                                          const cepStr =
                                                            $state.form.value
                                                              ?.address?.cep;
                                                          if (
                                                            isNaN(+cepStr) ||
                                                            cepStr.length !== 8
                                                          ) {
                                                            return;
                                                          }
                                                          const cep = +cepStr;
                                                          try {
                                                            const data = await (
                                                              await fetch(
                                                                `https://viacep.com.br/ws/${cep}/json/`
                                                              )
                                                            ).json();
                                                            $state.form.value.address =
                                                              {
                                                                address:
                                                                  data.logradouro,
                                                                bairro:
                                                                  data.bairro,
                                                                city: data.localidade,
                                                                state: data.uf
                                                              };
                                                            return ($state.isLoading =
                                                              false);
                                                          } catch {
                                                            return ($state.isLoading =
                                                              false);
                                                          }
                                                        })();
                                                      }
                                                    )
                                                };
                                                return __wrapUserFunction(
                                                  {
                                                    type: "InteractionLoc",
                                                    actionName:
                                                      "customFunction",
                                                    interactionUuid:
                                                      "ZSh2qbbTe",
                                                    componentUuid: "dYFvLDGEBe"
                                                  },
                                                  () =>
                                                    (({ customFunction }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]),
                                                  actionArgs
                                                );
                                              })()
                                            : undefined;
                                          if (
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] =
                                              await __wrapUserPromise(
                                                {
                                                  type: "InteractionLoc",
                                                  actionName: "customFunction",
                                                  interactionUuid: "ZSh2qbbTe",
                                                  componentUuid: "dYFvLDGEBe"
                                                },
                                                $steps["runCode"]
                                              );
                                          }
                                        }}
                                        onChange={(...eventArgs) => {
                                          p.generateStateOnChangeProp($state, [
                                            "input13",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }}
                                        value={
                                          p.generateStateValueProp($state, [
                                            "input13",
                                            "value"
                                          ]) ?? ""
                                        }
                                      />
                                    </FormItemWrapper>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__i09Vy
                                      )}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__jh6Iw
                                          )}
                                        >
                                          {"Logradouro"}
                                        </div>
                                      }
                                      name={"address" as const}
                                    >
                                      <TextInput
                                        data-plasmic-name={"input18"}
                                        data-plasmic-override={
                                          overrides.input18
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.input18
                                        )}
                                        onChange={(...eventArgs) => {
                                          p.generateStateOnChangeProp($state, [
                                            "input18",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }}
                                        value={
                                          p.generateStateValueProp($state, [
                                            "input18",
                                            "value"
                                          ]) ?? ""
                                        }
                                      />
                                    </FormItemWrapper>
                                    {true ? (
                                      <p.Stack
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__hBmx1
                                        )}
                                      >
                                        <FormItemWrapper
                                          className={classNames(
                                            "__wab_instance",
                                            sty.formField__zfhb5
                                          )}
                                          label={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__vGwzA
                                              )}
                                            >
                                              {"Número"}
                                            </div>
                                          }
                                          name={"number" as const}
                                        >
                                          <TextInput
                                            data-plasmic-name={"input8"}
                                            data-plasmic-override={
                                              overrides.input8
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.input8
                                            )}
                                            onChange={(...eventArgs) => {
                                              p.generateStateOnChangeProp(
                                                $state,
                                                ["input8", "value"]
                                              )(
                                                (e => e.target?.value).apply(
                                                  null,
                                                  eventArgs
                                                )
                                              );
                                            }}
                                            value={
                                              p.generateStateValueProp($state, [
                                                "input8",
                                                "value"
                                              ]) ?? ""
                                            }
                                          />
                                        </FormItemWrapper>
                                        <FormItemWrapper
                                          className={classNames(
                                            "__wab_instance",
                                            sty.formField___3Ogj
                                          )}
                                          label={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__u86W
                                              )}
                                            >
                                              {"Complemento"}
                                            </div>
                                          }
                                          name={"complemento" as const}
                                        >
                                          <TextInput
                                            data-plasmic-name={"input9"}
                                            data-plasmic-override={
                                              overrides.input9
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.input9
                                            )}
                                            onChange={(...eventArgs) => {
                                              p.generateStateOnChangeProp(
                                                $state,
                                                ["input9", "value"]
                                              )(
                                                (e => e.target?.value).apply(
                                                  null,
                                                  eventArgs
                                                )
                                              );
                                            }}
                                            value={
                                              p.generateStateValueProp($state, [
                                                "input9",
                                                "value"
                                              ]) ?? ""
                                            }
                                          />
                                        </FormItemWrapper>
                                      </p.Stack>
                                    ) : null}
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__my6JW
                                      )}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___9JSf2
                                          )}
                                        >
                                          {"Bairro"}
                                        </div>
                                      }
                                      name={"bairro" as const}
                                    >
                                      <TextInput
                                        data-plasmic-name={"input14"}
                                        data-plasmic-override={
                                          overrides.input14
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.input14
                                        )}
                                        onChange={(...eventArgs) => {
                                          p.generateStateOnChangeProp($state, [
                                            "input14",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }}
                                        value={
                                          p.generateStateValueProp($state, [
                                            "input14",
                                            "value"
                                          ]) ?? ""
                                        }
                                      />
                                    </FormItemWrapper>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__c0TEz
                                      )}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__qCq99
                                          )}
                                        >
                                          {"Cidade"}
                                        </div>
                                      }
                                      name={"city" as const}
                                    >
                                      <TextInput
                                        data-plasmic-name={"input15"}
                                        data-plasmic-override={
                                          overrides.input15
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.input15
                                        )}
                                        onChange={(...eventArgs) => {
                                          p.generateStateOnChangeProp($state, [
                                            "input15",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }}
                                        value={
                                          p.generateStateValueProp($state, [
                                            "input15",
                                            "value"
                                          ]) ?? ""
                                        }
                                      />
                                    </FormItemWrapper>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__psNuu
                                      )}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__lfgXh
                                          )}
                                        >
                                          {"Estado"}
                                        </div>
                                      }
                                      name={"state" as const}
                                    >
                                      <TextInput
                                        data-plasmic-name={"input17"}
                                        data-plasmic-override={
                                          overrides.input17
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.input17
                                        )}
                                        onChange={(...eventArgs) => {
                                          p.generateStateOnChangeProp($state, [
                                            "input17",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }}
                                        value={
                                          p.generateStateValueProp($state, [
                                            "input17",
                                            "value"
                                          ]) ?? ""
                                        }
                                      />
                                    </FormItemWrapper>
                                  </p.Stack>
                                ) : null}
                              </FormGroup>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__we6Xw
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__vlF2
                                    )}
                                  >
                                    {"Telefone"}
                                  </div>
                                }
                                name={"telefone" as const}
                              >
                                <TextInput
                                  data-plasmic-name={"input16"}
                                  data-plasmic-override={overrides.input16}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.input16
                                  )}
                                  onChange={(...eventArgs) => {
                                    p.generateStateOnChangeProp($state, [
                                      "input16",
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  }}
                                  value={
                                    p.generateStateValueProp($state, [
                                      "input16",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__kk3R3
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__t5Hdi
                                    )}
                                  >
                                    {"Email"}
                                  </div>
                                }
                                name={"email" as const}
                              >
                                <TextInput
                                  data-plasmic-name={"input5"}
                                  data-plasmic-override={overrides.input5}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.input5
                                  )}
                                  onChange={(...eventArgs) => {
                                    p.generateStateOnChangeProp($state, [
                                      "input5",
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  }}
                                  value={
                                    p.generateStateValueProp($state, [
                                      "input5",
                                      "value"
                                    ]) ?? ""
                                  }
                                />
                              </FormItemWrapper>
                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__y1IUn
                                )}
                                submitsForm={true}
                              >
                                {"Próximo"}
                              </Button>
                            </p.Stack>
                          </div>
                        </FormProvider>
                      </FormWrapper>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return !$state.inForm;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__sdJ0E)}
                    >
                      <DataProvider
                        data-plasmic-name={"dataProvider"}
                        data-plasmic-override={overrides.dataProvider}
                        className={classNames(
                          "__wab_instance",
                          sty.dataProvider
                        )}
                        data={[
                          { label: "Nome completo", key: "name" },
                          { label: "Data de nascimento", key: "birthdate" },
                          { label: "Address", key: "address" },
                          { label: "Documento de identidade", key: "cpf" },
                          { label: "Telefone", key: "telefone" },
                          { label: "Email", key: "email" }
                        ]}
                        name={"info" as const}
                      >
                        <ph.DataCtxReader>
                          {$ctx =>
                            true
                              ? (
                                  (() => {
                                    try {
                                      return $state.inscritos;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })() ?? []
                                ).map((currentPerson, currentIndex) => (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__wwlSs
                                    )}
                                    key={currentIndex}
                                  >
                                    {(
                                      (() => {
                                        try {
                                          return $ctx.info;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })() ?? []
                                    ).map((currentItem, currentIndex) => (
                                      <p.Stack
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__mB40R
                                        )}
                                        key={currentIndex}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__mPaEe
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.label;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___98IIi
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.key ===
                                                  "address"
                                                  ? JSON.stringify(
                                                      currentPerson[
                                                        currentItem.key
                                                      ]
                                                    )
                                                  : currentPerson[
                                                      currentItem.key
                                                    ];
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </p.Stack>
                                    ))}
                                    {true ? (
                                      <p.Stack
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__wr3Fe
                                        )}
                                      >
                                        <Button
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button__ra5St
                                          )}
                                          color={"softBlue" as const}
                                          onClick={async event => {
                                            const $steps = {};
                                            $steps["updateSelectedPerson"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable:
                                                        __wrapUserFunction(
                                                          {
                                                            type: "InteractionArgLoc",
                                                            actionName:
                                                              "updateVariable",
                                                            interactionUuid:
                                                              "xutNGXi2X",
                                                            componentUuid:
                                                              "dYFvLDGEBe",
                                                            argName: "variable"
                                                          },
                                                          () => ({
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "selectedIndex"
                                                            ]
                                                          })
                                                        ),
                                                      operation:
                                                        __wrapUserFunction(
                                                          {
                                                            type: "InteractionArgLoc",
                                                            actionName:
                                                              "updateVariable",
                                                            interactionUuid:
                                                              "xutNGXi2X",
                                                            componentUuid:
                                                              "dYFvLDGEBe",
                                                            argName: "operation"
                                                          },
                                                          () => 0
                                                        ),
                                                      value: __wrapUserFunction(
                                                        {
                                                          type: "InteractionArgLoc",
                                                          actionName:
                                                            "updateVariable",
                                                          interactionUuid:
                                                            "xutNGXi2X",
                                                          componentUuid:
                                                            "dYFvLDGEBe",
                                                          argName: "value"
                                                        },
                                                        () => currentIndex
                                                      )
                                                    };
                                                    return __wrapUserFunction(
                                                      {
                                                        type: "InteractionLoc",
                                                        actionName:
                                                          "updateVariable",
                                                        interactionUuid:
                                                          "xutNGXi2X",
                                                        componentUuid:
                                                          "dYFvLDGEBe"
                                                      },
                                                      () =>
                                                        (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          p.set(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]),
                                                      actionArgs
                                                    );
                                                  })()
                                                : undefined;
                                            if (
                                              typeof $steps[
                                                "updateSelectedPerson"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateSelectedPerson"
                                              ].then === "function"
                                            ) {
                                              $steps["updateSelectedPerson"] =
                                                await __wrapUserPromise(
                                                  {
                                                    type: "InteractionLoc",
                                                    actionName:
                                                      "updateVariable",
                                                    interactionUuid:
                                                      "xutNGXi2X",
                                                    componentUuid: "dYFvLDGEBe"
                                                  },
                                                  $steps["updateSelectedPerson"]
                                                );
                                            }
                                            $steps["updateInForm"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable:
                                                      __wrapUserFunction(
                                                        {
                                                          type: "InteractionArgLoc",
                                                          actionName:
                                                            "updateVariable",
                                                          interactionUuid:
                                                            "0Y6fHorAB",
                                                          componentUuid:
                                                            "dYFvLDGEBe",
                                                          argName: "variable"
                                                        },
                                                        () => ({
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "inForm"
                                                          ]
                                                        })
                                                      ),
                                                    operation:
                                                      __wrapUserFunction(
                                                        {
                                                          type: "InteractionArgLoc",
                                                          actionName:
                                                            "updateVariable",
                                                          interactionUuid:
                                                            "0Y6fHorAB",
                                                          componentUuid:
                                                            "dYFvLDGEBe",
                                                          argName: "operation"
                                                        },
                                                        () => 4
                                                      )
                                                  };
                                                  return __wrapUserFunction(
                                                    {
                                                      type: "InteractionLoc",
                                                      actionName:
                                                        "updateVariable",
                                                      interactionUuid:
                                                        "0Y6fHorAB",
                                                      componentUuid:
                                                        "dYFvLDGEBe"
                                                    },
                                                    () =>
                                                      (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        const oldValue = p.get(
                                                          objRoot,
                                                          variablePath
                                                        );
                                                        p.set(
                                                          objRoot,
                                                          variablePath,
                                                          !oldValue
                                                        );
                                                        return !oldValue;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]),
                                                    actionArgs
                                                  );
                                                })()
                                              : undefined;
                                            if (
                                              typeof $steps["updateInForm"] ===
                                                "object" &&
                                              typeof $steps["updateInForm"]
                                                .then === "function"
                                            ) {
                                              $steps["updateInForm"] =
                                                await __wrapUserPromise(
                                                  {
                                                    type: "InteractionLoc",
                                                    actionName:
                                                      "updateVariable",
                                                    interactionUuid:
                                                      "0Y6fHorAB",
                                                    componentUuid: "dYFvLDGEBe"
                                                  },
                                                  $steps["updateInForm"]
                                                );
                                            }
                                          }}
                                          showStartIcon={true}
                                          startIcon={
                                            <EditIcon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__ecLkm
                                              )}
                                              role={"img"}
                                            />
                                          }
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__tcsAt
                                            )}
                                          >
                                            {"Editar inscrição"}
                                          </div>
                                        </Button>
                                        <Button
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button__elqr5
                                          )}
                                          color={"softRed" as const}
                                          onClick={async event => {
                                            const $steps = {};
                                            $steps["updateInscritos"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable:
                                                      __wrapUserFunction(
                                                        {
                                                          type: "InteractionArgLoc",
                                                          actionName:
                                                            "updateVariable",
                                                          interactionUuid:
                                                            "QEQaaA-MJ",
                                                          componentUuid:
                                                            "dYFvLDGEBe",
                                                          argName: "variable"
                                                        },
                                                        () => ({
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "inscritos"
                                                          ]
                                                        })
                                                      ),
                                                    operation:
                                                      __wrapUserFunction(
                                                        {
                                                          type: "InteractionArgLoc",
                                                          actionName:
                                                            "updateVariable",
                                                          interactionUuid:
                                                            "QEQaaA-MJ",
                                                          componentUuid:
                                                            "dYFvLDGEBe",
                                                          argName: "operation"
                                                        },
                                                        () => 6
                                                      ),
                                                    startIndex:
                                                      __wrapUserFunction(
                                                        {
                                                          type: "InteractionArgLoc",
                                                          actionName:
                                                            "updateVariable",
                                                          interactionUuid:
                                                            "QEQaaA-MJ",
                                                          componentUuid:
                                                            "dYFvLDGEBe",
                                                          argName: "startIndex"
                                                        },
                                                        () =>
                                                          (() => {
                                                            try {
                                                              return currentIndex;
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return undefined;
                                                              }
                                                              throw e;
                                                            }
                                                          })()
                                                      ),
                                                    deleteCount:
                                                      __wrapUserFunction(
                                                        {
                                                          type: "InteractionArgLoc",
                                                          actionName:
                                                            "updateVariable",
                                                          interactionUuid:
                                                            "QEQaaA-MJ",
                                                          componentUuid:
                                                            "dYFvLDGEBe",
                                                          argName: "deleteCount"
                                                        },
                                                        () => 1
                                                      )
                                                  };
                                                  return __wrapUserFunction(
                                                    {
                                                      type: "InteractionLoc",
                                                      actionName:
                                                        "updateVariable",
                                                      interactionUuid:
                                                        "QEQaaA-MJ",
                                                      componentUuid:
                                                        "dYFvLDGEBe"
                                                    },
                                                    () =>
                                                      (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        const arr = p.get(
                                                          objRoot,
                                                          variablePath
                                                        );
                                                        arr.splice(
                                                          startIndex,
                                                          deleteCount
                                                        );
                                                        return arr;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]),
                                                    actionArgs
                                                  );
                                                })()
                                              : undefined;
                                            if (
                                              typeof $steps[
                                                "updateInscritos"
                                              ] === "object" &&
                                              typeof $steps["updateInscritos"]
                                                .then === "function"
                                            ) {
                                              $steps["updateInscritos"] =
                                                await __wrapUserPromise(
                                                  {
                                                    type: "InteractionLoc",
                                                    actionName:
                                                      "updateVariable",
                                                    interactionUuid:
                                                      "QEQaaA-MJ",
                                                    componentUuid: "dYFvLDGEBe"
                                                  },
                                                  $steps["updateInscritos"]
                                                );
                                            }
                                          }}
                                          showStartIcon={true}
                                          startIcon={
                                            <CloseIcon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__buYu0
                                              )}
                                              role={"img"}
                                            />
                                          }
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__c8CHv
                                            )}
                                          >
                                            {"Remover inscrição"}
                                          </div>
                                        </Button>
                                      </p.Stack>
                                    ) : null}
                                  </p.Stack>
                                ))
                              : null
                          }
                        </ph.DataCtxReader>
                      </DataProvider>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yuMj
                        )}
                      >
                        {"Total: R$ 145,00"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__crj9Z
                        )}
                      >
                        {"Adultos: 1"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yasZc
                        )}
                      >
                        {"Crianças: 0"}
                      </div>
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tmwrx
                          )}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__xaC1P
                            )}
                            color={"softGreen" as const}
                            onClick={async event => {
                              const $steps = {};
                              $steps["updateSelectedPerson"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "b8iNB2OJ9",
                                          componentUuid: "dYFvLDGEBe",
                                          argName: "variable"
                                        },
                                        () => ({
                                          objRoot: $state,
                                          variablePath: ["selectedIndex"]
                                        })
                                      ),
                                      operation: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "b8iNB2OJ9",
                                          componentUuid: "dYFvLDGEBe",
                                          argName: "operation"
                                        },
                                        () => 0
                                      ),
                                      value: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "b8iNB2OJ9",
                                          componentUuid: "dYFvLDGEBe",
                                          argName: "value"
                                        },
                                        () => undefined
                                      )
                                    };
                                    return __wrapUserFunction(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "updateVariable",
                                        interactionUuid: "b8iNB2OJ9",
                                        componentUuid: "dYFvLDGEBe"
                                      },
                                      () =>
                                        (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          p.set(objRoot, variablePath, value);
                                          return value;
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    );
                                  })()
                                : undefined;
                              if (
                                typeof $steps["updateSelectedPerson"] ===
                                  "object" &&
                                typeof $steps["updateSelectedPerson"].then ===
                                  "function"
                              ) {
                                $steps["updateSelectedPerson"] =
                                  await __wrapUserPromise(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "b8iNB2OJ9",
                                      componentUuid: "dYFvLDGEBe"
                                    },
                                    $steps["updateSelectedPerson"]
                                  );
                              }
                              $steps["updateInForm"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "w4p1-23BW",
                                          componentUuid: "dYFvLDGEBe",
                                          argName: "variable"
                                        },
                                        () => ({
                                          objRoot: $state,
                                          variablePath: ["inForm"]
                                        })
                                      ),
                                      operation: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "w4p1-23BW",
                                          componentUuid: "dYFvLDGEBe",
                                          argName: "operation"
                                        },
                                        () => 4
                                      )
                                    };
                                    return __wrapUserFunction(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "updateVariable",
                                        interactionUuid: "w4p1-23BW",
                                        componentUuid: "dYFvLDGEBe"
                                      },
                                      () =>
                                        (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          const oldValue = p.get(
                                            objRoot,
                                            variablePath
                                          );
                                          p.set(
                                            objRoot,
                                            variablePath,
                                            !oldValue
                                          );
                                          return !oldValue;
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    );
                                  })()
                                : undefined;
                              if (
                                typeof $steps["updateInForm"] === "object" &&
                                typeof $steps["updateInForm"].then ===
                                  "function"
                              ) {
                                $steps["updateInForm"] =
                                  await __wrapUserPromise(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "w4p1-23BW",
                                      componentUuid: "dYFvLDGEBe"
                                    },
                                    $steps["updateInForm"]
                                  );
                              }
                            }}
                            showStartIcon={true}
                            startIcon={
                              <PlusIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__mgVrc
                                )}
                                role={"img"}
                              />
                            }
                          >
                            {"Adicionar inscrição"}
                          </Button>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__nJfum
                            )}
                            showStartIcon={true}
                            startIcon={
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__g7HjI
                                )}
                                role={"img"}
                              />
                            }
                          >
                            {"Finalizar inscrição"}
                          </Button>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          {(() => {
            try {
              return $state.isLoading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Loading
              data-plasmic-name={"loading"}
              data-plasmic-override={overrides.loading}
              className={classNames("__wab_instance", sty.loading)}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "responsiveMenu",
    "form",
    "formProvider",
    "input",
    "input2",
    "input4",
    "formFieldGroup",
    "input13",
    "input18",
    "input8",
    "input9",
    "input14",
    "input15",
    "input17",
    "input16",
    "input5",
    "dataProvider",
    "loading"
  ],
  responsiveMenu: ["responsiveMenu"],
  form: [
    "form",
    "formProvider",
    "input",
    "input2",
    "input4",
    "formFieldGroup",
    "input13",
    "input18",
    "input8",
    "input9",
    "input14",
    "input15",
    "input17",
    "input16",
    "input5"
  ],
  formProvider: [
    "formProvider",
    "input",
    "input2",
    "input4",
    "formFieldGroup",
    "input13",
    "input18",
    "input8",
    "input9",
    "input14",
    "input15",
    "input17",
    "input16",
    "input5"
  ],
  input: ["input"],
  input2: ["input2"],
  input4: ["input4"],
  formFieldGroup: [
    "formFieldGroup",
    "input13",
    "input18",
    "input8",
    "input9",
    "input14",
    "input15",
    "input17"
  ],
  input13: ["input13"],
  input18: ["input18"],
  input8: ["input8"],
  input9: ["input9"],
  input14: ["input14"],
  input15: ["input15"],
  input17: ["input17"],
  input16: ["input16"],
  input5: ["input5"],
  dataProvider: ["dataProvider"],
  loading: ["loading"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  responsiveMenu: typeof ResponsiveMenu;
  form: typeof FormWrapper;
  formProvider: typeof FormProvider;
  input: typeof TextInput;
  input2: typeof TextInput;
  input4: typeof TextInput;
  formFieldGroup: typeof FormGroup;
  input13: typeof TextInput;
  input18: typeof TextInput;
  input8: typeof TextInput;
  input9: typeof TextInput;
  input14: typeof TextInput;
  input15: typeof TextInput;
  input17: typeof TextInput;
  input16: typeof TextInput;
  input5: typeof TextInput;
  dataProvider: typeof DataProvider;
  loading: typeof Loading;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInscricao__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInscricao__VariantsArgs;
    args?: PlasmicInscricao__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInscricao__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInscricao__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicInscricao__ArgProps,
          internalVariantPropNames: PlasmicInscricao__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInscricao__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInscricao";
  } else {
    func.displayName = `PlasmicInscricao.${nodeName}`;
  }
  return func;
}

export const PlasmicInscricao = Object.assign(
  // Top-level PlasmicInscricao renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    responsiveMenu: makeNodeComponent("responsiveMenu"),
    form: makeNodeComponent("form"),
    formProvider: makeNodeComponent("formProvider"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input4: makeNodeComponent("input4"),
    formFieldGroup: makeNodeComponent("formFieldGroup"),
    input13: makeNodeComponent("input13"),
    input18: makeNodeComponent("input18"),
    input8: makeNodeComponent("input8"),
    input9: makeNodeComponent("input9"),
    input14: makeNodeComponent("input14"),
    input15: makeNodeComponent("input15"),
    input17: makeNodeComponent("input17"),
    input16: makeNodeComponent("input16"),
    input5: makeNodeComponent("input5"),
    dataProvider: makeNodeComponent("dataProvider"),
    loading: makeNodeComponent("loading"),

    // Metadata about props expected for PlasmicInscricao
    internalVariantProps: PlasmicInscricao__VariantProps,
    internalArgProps: PlasmicInscricao__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInscricao;
/* prettier-ignore-end */
