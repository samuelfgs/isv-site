// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eJV4HbfxnEVLnqrd4EbnFE
// Component: 5UuQ-pHvfY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic_imported_dep_5.module.css"; // plasmic-import: vPxRt8CsCVSueVGGfSnXej/projectcss
import plasmic_antd_5_hostless_css from "../imported_dep_2/plasmic_imported_dep_2.module.css"; // plasmic-import: hd3DE2FDcofgfAhm4cao6V/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic_imported_dep_4.module.css"; // plasmic-import: ssURyHgRtXzJKQ8DzunbQH/projectcss
import projectcss from "./plasmic_a_d_2.module.css"; // plasmic-import: eJV4HbfxnEVLnqrd4EbnFE/projectcss
import sty from "./PlasmicPalestrante.module.css"; // plasmic-import: 5UuQ-pHvfY/css

createPlasmicElementProxy;

export type PlasmicPalestrante__VariantMembers = {};
export type PlasmicPalestrante__VariantsArgs = {};
type VariantPropType = keyof PlasmicPalestrante__VariantsArgs;
export const PlasmicPalestrante__VariantProps = new Array<VariantPropType>();

export type PlasmicPalestrante__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPalestrante__ArgsType;
export const PlasmicPalestrante__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicPalestrante__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultPalestranteProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPalestrante__RenderFunc(props: {
  variants: PlasmicPalestrante__VariantsArgs;
  args: PlasmicPalestrante__ArgsType;
  overrides: PlasmicPalestrante__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__szKGi)}>
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__f73Zz)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__e86Ow)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"200px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/a_d_2/images/adhemarDeCampospng.png",
                    fullWidth: 1080,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.children
            })}
          </div>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hwY6)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__fWlrU)}>
              {p.renderPlasmicSlot({
                defaultContents: "Adhemar de Campos",
                value: args.slot,
                className: classNames(sty.slotTargetSlot)
              })}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ia6Zb)}>
              {p.renderPlasmicSlot({
                defaultContents:
                  "Autor de aproximadamente 1000 can\u00e7\u00f5es, Pr. Adhemar de Campos \u00e9 um dos mais not\u00f3rios ministros de louvor e adora\u00e7\u00e3o no Brasil, dedicando sua vida a compor can\u00e7\u00f5es que ajudam muitos a experimentarem a presen\u00e7a de Deus de um modo profundo. Em 1985 gravou seu primeiro LP e em 1987, num pioneirismo \u00edmpar, realizou a primeira grava\u00e7\u00e3o ao vivo de m\u00fasicas crist\u00e3s. Sua hist\u00f3ria confunde-se com a da m\u00fasica gospel no Brasil, tanto que na d\u00e9cada de 80 era um dos poucos produtores de c\u00e2nticos crist\u00e3os com grande proje\u00e7\u00e3o. Seu minist\u00e9rio influenciou gera\u00e7\u00f5es com composi\u00e7\u00f5es atemporais que at\u00e9 hoje nos tocam, oferecendo valores de uma vida crist\u00e3 verdadeira. S\u00e3o mais de 45 anos de caminhada com Cristo, claramente percept\u00edveis no conjunto de sua obra.",
                value: args.slot2,
                className: classNames(sty.slotTargetSlot2)
              })}
            </div>
          </p.Stack>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPalestrante__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPalestrante__VariantsArgs;
    args?: PlasmicPalestrante__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPalestrante__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPalestrante__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPalestrante__ArgProps,
          internalVariantPropNames: PlasmicPalestrante__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPalestrante__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPalestrante";
  } else {
    func.displayName = `PlasmicPalestrante.${nodeName}`;
  }
  return func;
}

export const PlasmicPalestrante = Object.assign(
  // Top-level PlasmicPalestrante renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicPalestrante
    internalVariantProps: PlasmicPalestrante__VariantProps,
    internalArgProps: PlasmicPalestrante__ArgProps
  }
);

export default PlasmicPalestrante;
/* prettier-ignore-end */
