// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eJV4HbfxnEVLnqrd4EbnFE
// Component: ScHFxlsSTX8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ResponsiveMenu from "../../ResponsiveMenu"; // plasmic-import: EjDwpL97hh/component
import Button from "../../Button"; // plasmic-import: 7rzM78mJWkH/component
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: u-J0rH0B-4/codeComponent
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponent
import { FormProvider } from "../../code-components/Providers"; // plasmic-import: gzu14pntqz/codeComponent
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: EYHwZh9ILg/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: nehhorfRRWX/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponent
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponentHelper

import { useScreenVariants as useScreenVariantsdu4QaJy8Zhmfq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Du4QaJY8zhmfq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic_imported_dep_5.module.css"; // plasmic-import: vPxRt8CsCVSueVGGfSnXej/projectcss
import plasmic_antd_5_hostless_css from "../imported_dep_2/plasmic_imported_dep_2.module.css"; // plasmic-import: hd3DE2FDcofgfAhm4cao6V/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic_imported_dep_4.module.css"; // plasmic-import: ssURyHgRtXzJKQ8DzunbQH/projectcss
import projectcss from "./plasmic_a_d_2.module.css"; // plasmic-import: eJV4HbfxnEVLnqrd4EbnFE/projectcss
import sty from "./PlasmicFaleConosco.module.css"; // plasmic-import: ScHFxlsSTX8/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: fpqx2Qlomeq/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: rlqzA49ld7A/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: DFUukaBqwOq/icon

createPlasmicElementProxy;

export type PlasmicFaleConosco__VariantMembers = {};
export type PlasmicFaleConosco__VariantsArgs = {};
type VariantPropType = keyof PlasmicFaleConosco__VariantsArgs;
export const PlasmicFaleConosco__VariantProps = new Array<VariantPropType>();

export type PlasmicFaleConosco__ArgsType = {
  inscritosx?: any;
};
type ArgPropType = keyof PlasmicFaleConosco__ArgsType;
export const PlasmicFaleConosco__ArgProps = new Array<ArgPropType>(
  "inscritosx"
);

export type PlasmicFaleConosco__OverridesType = {
  root?: p.Flex<"div">;
  responsiveMenu?: p.Flex<typeof ResponsiveMenu>;
  img?: p.Flex<typeof p.PlasmicImg>;
  loadingBoundary?: p.Flex<typeof LoadingBoundary>;
  form?: p.Flex<typeof FormWrapper>;
  formProvider?: p.Flex<typeof FormProvider>;
  input?: p.Flex<typeof TextInput>;
  input2?: p.Flex<typeof TextInput>;
  input4?: p.Flex<typeof TextInput>;
  textArea?: p.Flex<typeof AntdTextArea>;
};

export interface DefaultFaleConoscoProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFaleConosco__RenderFunc(props: {
  variants: PlasmicFaleConosco__VariantsArgs;
  args: PlasmicFaleConosco__ArgsType;
  overrides: PlasmicFaleConosco__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          inscritosx: [
            {
              name: "Samuel Ferreira",
              birthdate: "24/06/1996",
              address: "adasdafds",
              cpf: "43529367826",
              telefone: "13997424001",
              email: "fgs.samuel@gmail.com"
            },
            {
              name: "Samuel Ferreira",
              birthdate: "24/06/1996",
              address: "adasdafds",
              cpf: "43529367826",
              telefone: "13997424001",
              email: "fgs.samuel@gmail.com"
            }
          ]
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdTextArea_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const { cache, mutate: swrMutate } = usePlasmicDataConfig();
  const mutate = swrMutate;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdu4QaJy8Zhmfq()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicFaleConosco.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicFaleConosco.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicFaleConosco.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicFaleConosco.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicFaleConosco.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <ResponsiveMenu
            data-plasmic-name={"responsiveMenu"}
            data-plasmic-override={overrides.responsiveMenu}
            className={classNames("__wab_instance", sty.responsiveMenu)}
          />

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eEbrP)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kFlPp)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__toIlc
                    )}
                  >
                    {"Fale conosco"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mKdxd
                    )}
                  >
                    {"Ficou com alguma d\u00favida?"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qwPs3
                    )}
                  >
                    {"Fale conosco atrav\u00e9s do nosso whatsapp"}
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__di0Jv)}
                    color={"softGreen" as const}
                    link={"https://wa.me/+5513991259404" as const}
                    showStartIcon={true}
                    startIcon={
                      <p.PlasmicImg
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"80px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/a_d_2/images/whatsapp.png",
                          fullWidth: 600,
                          fullHeight: 383,
                          aspectRatio: undefined
                        }}
                      />
                    }
                    target={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lpHyV
                      )}
                    >
                      {"Fale conosco"}
                    </div>
                  </Button>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lb9Kx
                    )}
                  >
                    {"Ou envie uma mensagem e retornaremos"}
                  </div>
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kormY)}
                    >
                      <LoadingBoundary
                        data-plasmic-name={"loadingBoundary"}
                        data-plasmic-override={overrides.loadingBoundary}
                        className={classNames(
                          "__wab_instance",
                          sty.loadingBoundary
                        )}
                        loadingState={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__waqhE
                                )}
                              >
                                {"Loading..."}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        }
                      >
                        <ph.DataCtxReader>
                          {$ctx => (
                            <FormWrapper
                              data-plasmic-name={"form"}
                              data-plasmic-override={overrides.form}
                              className={classNames("__wab_instance", sty.form)}
                              colon={false}
                              extendedOnValuesChange={p.generateStateOnChangeProp(
                                $state,
                                ["form", "value"]
                              )}
                              formItems={[
                                {
                                  label: "Name",
                                  name: "name",
                                  inputType: "Text"
                                },
                                {
                                  label: "Message",
                                  name: "message",
                                  inputType: "Text Area"
                                }
                              ]}
                              labelCol={(() => {
                                const __composite = {
                                  span: null,
                                  horizontalOnly: true
                                };
                                __composite["span"] = 6;
                                return __composite;
                              })()}
                              layout={
                                hasVariant(globalVariants, "screen", "desktop")
                                  ? ("inline" as const)
                                  : ("vertical" as const)
                              }
                              mode={undefined}
                              onFinish={async values => {
                                const $steps = {};
                                $steps["insert"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "dataSourceOp",
                                            interactionUuid: "VBkeNYt5B",
                                            componentUuid: "ScHFxlsSTX8",
                                            argName: "dataOp"
                                          },
                                          () => ({
                                            sourceId: "du8jW5s7JnVfk4bHYp38RF",
                                            opId: "b0b31ddf-832e-49cd-b945-3980a874898f",
                                            userArgs: {},
                                            cacheKey: null,
                                            invalidatedKeys: null,
                                            roleId: null
                                          })
                                        )
                                      };
                                      return __wrapUserFunction(
                                        {
                                          type: "InteractionLoc",
                                          actionName: "dataSourceOp",
                                          interactionUuid: "VBkeNYt5B",
                                          componentUuid: "ScHFxlsSTX8"
                                        },
                                        () =>
                                          (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              if (
                                                dataOp.invalidatedKeys &&
                                                dataOp.invalidatedKeys.find(
                                                  key =>
                                                    key ===
                                                    "plasmic_refresh_all"
                                                )
                                              ) {
                                                await Promise.all(
                                                  Array.from(cache.keys()).map(
                                                    async key => mutate(key)
                                                  )
                                                );

                                                return response;
                                              }
                                              if (dataOp.invalidatedKeys) {
                                                await Promise.all(
                                                  dataOp.invalidatedKeys.map(
                                                    async invalidateKey =>
                                                      Promise.all(
                                                        Array.from(
                                                          cache.keys()
                                                        ).map(async key => {
                                                          if (
                                                            typeof key ===
                                                              "string" &&
                                                            key.includes(
                                                              `.$.${invalidateKey}.$.`
                                                            )
                                                          ) {
                                                            return mutate(key);
                                                          }
                                                          return Promise.resolve();
                                                        })
                                                      )
                                                  )
                                                );
                                              }
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]),
                                        actionArgs
                                      );
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["insert"] === "object" &&
                                  typeof $steps["insert"].then === "function"
                                ) {
                                  $steps["insert"] = await __wrapUserPromise(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "dataSourceOp",
                                      interactionUuid: "VBkeNYt5B",
                                      componentUuid: "ScHFxlsSTX8"
                                    },
                                    $steps["insert"]
                                  );
                                }
                              }}
                              submitSlot={null}
                              wrapperCol={(() => {
                                const __composite = {
                                  span: null,
                                  horizontalOnly: true
                                };
                                __composite["span"] = 18;
                                return __composite;
                              })()}
                            >
                              <FormProvider
                                data-plasmic-name={"formProvider"}
                                data-plasmic-override={overrides.formProvider}
                                className={classNames(
                                  "__wab_instance",
                                  sty.formProvider
                                )}
                              >
                                <ph.DataCtxReader>
                                  {$ctx => (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__fIu
                                      )}
                                    >
                                      <p.Stack
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__j5Ntn
                                        )}
                                      >
                                        <FormItemWrapper
                                          className={classNames(
                                            "__wab_instance",
                                            sty.formField__kfyDv
                                          )}
                                          label={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__vnLq
                                              )}
                                            >
                                              {"Nome"}
                                            </div>
                                          }
                                          name={"name" as const}
                                          rules={[
                                            {
                                              ruleType: "required",
                                              message:
                                                "Por favor, preencha seu nome"
                                            }
                                          ]}
                                        >
                                          <TextInput
                                            data-plasmic-name={"input"}
                                            data-plasmic-override={
                                              overrides.input
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.input
                                            )}
                                            onChange={(...eventArgs) => {
                                              p.generateStateOnChangeProp(
                                                $state,
                                                ["input", "value"]
                                              )(
                                                (e => e.target?.value).apply(
                                                  null,
                                                  eventArgs
                                                )
                                              );
                                            }}
                                            value={
                                              p.generateStateValueProp($state, [
                                                "input",
                                                "value"
                                              ]) ?? ""
                                            }
                                          />
                                        </FormItemWrapper>
                                        <FormItemWrapper
                                          className={classNames(
                                            "__wab_instance",
                                            sty.formField___04F9
                                          )}
                                          label={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__jQzP
                                              )}
                                            >
                                              {"Telefone"}
                                            </div>
                                          }
                                          name={"telefone" as const}
                                          rules={[
                                            {
                                              ruleType: "required",
                                              message:
                                                "Por favor, preencha seu telefone"
                                            }
                                          ]}
                                        >
                                          <TextInput
                                            data-plasmic-name={"input2"}
                                            data-plasmic-override={
                                              overrides.input2
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.input2
                                            )}
                                            onChange={(...eventArgs) => {
                                              p.generateStateOnChangeProp(
                                                $state,
                                                ["input2", "value"]
                                              )(
                                                (e => e.target?.value).apply(
                                                  null,
                                                  eventArgs
                                                )
                                              );
                                            }}
                                            value={
                                              p.generateStateValueProp($state, [
                                                "input2",
                                                "value"
                                              ]) ?? ""
                                            }
                                          />
                                        </FormItemWrapper>
                                        <FormItemWrapper
                                          className={classNames(
                                            "__wab_instance",
                                            sty.formField__jKpZ
                                          )}
                                          label={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__nXyt
                                              )}
                                            >
                                              {"Email"}
                                            </div>
                                          }
                                          name={"email" as const}
                                          rules={[
                                            {
                                              ruleType: "required",
                                              message:
                                                "Por favor, preencha seu email"
                                            }
                                          ]}
                                        >
                                          <TextInput
                                            data-plasmic-name={"input4"}
                                            data-plasmic-override={
                                              overrides.input4
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.input4
                                            )}
                                            onChange={(...eventArgs) => {
                                              p.generateStateOnChangeProp(
                                                $state,
                                                ["input4", "value"]
                                              )(
                                                (e => e.target?.value).apply(
                                                  null,
                                                  eventArgs
                                                )
                                              );
                                            }}
                                            value={
                                              p.generateStateValueProp($state, [
                                                "input4",
                                                "value"
                                              ]) ?? ""
                                            }
                                          />
                                        </FormItemWrapper>
                                        <FormItemWrapper
                                          className={classNames(
                                            "__wab_instance",
                                            sty.formField__zjUay
                                          )}
                                          label={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___0LD21
                                              )}
                                            >
                                              {"Mensagem"}
                                            </div>
                                          }
                                          name={"message" as const}
                                          rules={[
                                            {
                                              ruleType: "required",
                                              message:
                                                "Por favor, digite sua mensagem"
                                            }
                                          ]}
                                        >
                                          {(() => {
                                            const child$Props = {
                                              bordered: true,
                                              className: classNames(
                                                "__wab_instance",
                                                sty.textArea
                                              ),
                                              onChange:
                                                p.generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "value",
                                                  ["textArea", "value"],
                                                  AntdTextArea_Helpers
                                                ),
                                              value: p.generateStateValueProp(
                                                $state,
                                                ["textArea", "value"]
                                              )
                                            };
                                            p.initializeCodeComponentStates(
                                              $state,
                                              [
                                                {
                                                  name: "value",
                                                  plasmicStateName:
                                                    "textArea.value"
                                                }
                                              ],
                                              [],
                                              AntdTextArea_Helpers ?? {},
                                              child$Props
                                            );

                                            return (
                                              <AntdTextArea
                                                data-plasmic-name={"textArea"}
                                                data-plasmic-override={
                                                  overrides.textArea
                                                }
                                                {...child$Props}
                                              />
                                            );
                                          })()}
                                        </FormItemWrapper>
                                        <Button
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button__q10Zq
                                          )}
                                          submitsForm={true}
                                        >
                                          {"Enviar"}
                                        </Button>
                                      </p.Stack>
                                    </div>
                                  )}
                                </ph.DataCtxReader>
                              </FormProvider>
                            </FormWrapper>
                          )}
                        </ph.DataCtxReader>
                      </LoadingBoundary>
                    </div>
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "responsiveMenu",
    "img",
    "loadingBoundary",
    "form",
    "formProvider",
    "input",
    "input2",
    "input4",
    "textArea"
  ],
  responsiveMenu: ["responsiveMenu"],
  img: ["img"],
  loadingBoundary: [
    "loadingBoundary",
    "form",
    "formProvider",
    "input",
    "input2",
    "input4",
    "textArea"
  ],
  form: ["form", "formProvider", "input", "input2", "input4", "textArea"],
  formProvider: ["formProvider", "input", "input2", "input4", "textArea"],
  input: ["input"],
  input2: ["input2"],
  input4: ["input4"],
  textArea: ["textArea"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  responsiveMenu: typeof ResponsiveMenu;
  img: typeof p.PlasmicImg;
  loadingBoundary: typeof LoadingBoundary;
  form: typeof FormWrapper;
  formProvider: typeof FormProvider;
  input: typeof TextInput;
  input2: typeof TextInput;
  input4: typeof TextInput;
  textArea: typeof AntdTextArea;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaleConosco__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaleConosco__VariantsArgs;
    args?: PlasmicFaleConosco__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFaleConosco__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFaleConosco__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFaleConosco__ArgProps,
          internalVariantPropNames: PlasmicFaleConosco__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFaleConosco__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaleConosco";
  } else {
    func.displayName = `PlasmicFaleConosco.${nodeName}`;
  }
  return func;
}

export const PlasmicFaleConosco = Object.assign(
  // Top-level PlasmicFaleConosco renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    responsiveMenu: makeNodeComponent("responsiveMenu"),
    img: makeNodeComponent("img"),
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    form: makeNodeComponent("form"),
    formProvider: makeNodeComponent("formProvider"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input4: makeNodeComponent("input4"),
    textArea: makeNodeComponent("textArea"),

    // Metadata about props expected for PlasmicFaleConosco
    internalVariantProps: PlasmicFaleConosco__VariantProps,
    internalArgProps: PlasmicFaleConosco__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "AD20 - Fale Conosco",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/82149cfdbb4813cc0398b4e443013c4b.png",
      canonical: ""
    }
  }
);

export default PlasmicFaleConosco;
/* prettier-ignore-end */
