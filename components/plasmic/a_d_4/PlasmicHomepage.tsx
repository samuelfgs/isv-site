// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4e8xJRxm6TCFH21WJFauki
// Component: EhA9mUBKziYx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal"; // plasmic-import: xx93QbkHH5i/codeComponent
import Button from "../../Button"; // plasmic-import: 7rzM78mJWkH/component
import ResponsiveMenu from "../../ResponsiveMenu"; // plasmic-import: EjDwpL97hh/component
import Video from "../../code-components/Video"; // plasmic-import: ApNITBkBYT/codeComponent
import InscricaoButton from "../../InscricaoButton"; // plasmic-import: VrYzW9MhJk/component
import { Participantes } from "../../code-components/Parallax"; // plasmic-import: rVe2Ib6zMg/codeComponent
import PalestrantesData from "../../PalestrantesData"; // plasmic-import: PXPe8ME1DQ/component
import Palestrante from "../../Palestrante"; // plasmic-import: 5UuQ-pHvfY/component

import { useScreenVariants as useScreenVariantsdu4QaJy8Zhmfq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Du4QaJY8zhmfq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic_imported_dep_5.module.css"; // plasmic-import: gaUgJw14zgC2h2RkxhZpNV/projectcss
import plasmic_antd_5_hostless_2_css from "../imported_dep_2/plasmic_imported_dep_2.module.css"; // plasmic-import: sJ7Q2xHXjtdMNANtYDfUU4/projectcss
import plasmic_antd_5_hostless_css from "../imported_dep_8/plasmic_imported_dep_8.module.css"; // plasmic-import: ouSbC2XoeRJw8hN6QJ1aQq/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic_imported_dep_4.module.css"; // plasmic-import: 2FYXZ1NU3BnbJ2Q5KYH4Tr/projectcss
import projectcss from "./plasmic_a_d_4.module.css"; // plasmic-import: 4e8xJRxm6TCFH21WJFauki/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: EhA9mUBKziYx/css

import ChevronDownsvgIcon from "./icons/PlasmicIcon__ChevronDownsvg"; // plasmic-import: nGK9Tff5vcb/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: DFUukaBqwOq/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: fpqx2Qlomeq/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  modal?: p.Flex<typeof AntdModal>;
  fixado?: p.Flex<"div">;
  responsiveMenu?: p.Flex<typeof ResponsiveMenu>;
  htmlVideo?: p.Flex<typeof Video>;
  inscricaoButton?: p.Flex<typeof InscricaoButton>;
  participantes?: p.Flex<typeof Participantes>;
  palestrantesData?: p.Flex<typeof PalestrantesData>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modalImage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdu4QaJy8Zhmfq()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_antd_5_hostless_2_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            closeIcon={
              <div className={classNames(projectcss.all, sty.freeBox__fh8Hv)} />
            }
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
              plasmic_antd_5_hostless_2_css.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens
            )}
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__b43KU)} />
            }
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={p.generateStateOnChangeProp($state, [
              "modal",
              "open"
            ])}
            open={p.generateStateValueProp($state, ["modal", "open"])}
            title={null}
          >
            <div className={classNames(projectcss.all, sty.freeBox__a442J)}>
              {(() => {
                try {
                  return $state.modalImage === 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__noZd8)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/a_d_4/images/whatsAppImage20230918At232435Jpeg.jpg",
                    fullWidth: 689,
                    fullHeight: 689,
                    aspectRatio: undefined
                  }}
                />
              ) : null}
              {(() => {
                try {
                  return $state.modalImage === 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__oWfJa)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/a_d_4/images/whatsAppImage20230918At232520Jpeg.jpg",
                    fullWidth: 645,
                    fullHeight: 645,
                    aspectRatio: undefined
                  }}
                />
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox__dkKok)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__z7Hit)}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateModalImage"] =
                      $state.modalImage > 0
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modalImage"]
                              },
                              operation: 3
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = p.get(objRoot, variablePath);
                              p.set(objRoot, variablePath, oldValue - 1);
                              return oldValue - 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      typeof $steps["updateModalImage"] === "object" &&
                      typeof $steps["updateModalImage"].then === "function"
                    ) {
                      $steps["updateModalImage"] = await $steps[
                        "updateModalImage"
                      ];
                    }
                  }}
                >
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__ep5JI)}
                    role={"img"}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__mW46W)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__gq8Pd)}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateModalImage"] =
                      $state.modalImage < 1
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modalImage"]
                              },
                              operation: 2
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = p.get(objRoot, variablePath);
                              p.set(objRoot, variablePath, oldValue + 1);
                              return oldValue + 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      typeof $steps["updateModalImage"] === "object" &&
                      typeof $steps["updateModalImage"].then === "function"
                    ) {
                      $steps["updateModalImage"] = await $steps[
                        "updateModalImage"
                      ];
                    }
                  }}
                >
                  <ChevronDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__pv2EG)}
                    role={"img"}
                  />
                </div>
              </div>
            </div>
          </AntdModal>
          <div
            data-plasmic-name={"fixado"}
            data-plasmic-override={overrides.fixado}
            className={classNames(projectcss.all, sty.fixado)}
          >
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__fEcyD
              )}
              component={Link}
              href={"https://wa.me/+5513991259404"}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__u44Ws)}
                displayHeight={"75px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"75px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/a_d_4/images/whatsapp.png",
                  fullWidth: 600,
                  fullHeight: 383,
                  aspectRatio: undefined
                }}
              />
            </p.PlasmicLink>
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__eDpuD)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__l7KFk)}>
              <div className={classNames(projectcss.all, sty.freeBox___5Qfn8)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jL64G
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tablet")
                    ? "Dias 21 e 22 de outubro"
                    : "21 e 22"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___66Sof
                  )}
                >
                  {"Outubro"}
                </div>
              </div>
              <Button
                className={classNames("__wab_instance", sty.button___7CoOt)}
                link={`/inscricao`}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eJtZ
                  )}
                >
                  {"QUERO ME INSCREVER"}
                </div>
              </Button>
            </div>
          </p.Stack>
          <ResponsiveMenu
            data-plasmic-name={"responsiveMenu"}
            data-plasmic-override={overrides.responsiveMenu}
            className={classNames("__wab_instance", sty.responsiveMenu)}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kUlCm)}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___1S6OG)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"80%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "desktop")
                  ? "500px"
                  : "auto"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/a_d_4/images/ad20AnosIcon211Png.png",
                fullWidth: 3666,
                fullHeight: 2547,
                aspectRatio: undefined
              }}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sMAat)}
            >
              <p.Stack
                as={p.PlasmicLink}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__w4Kf9
                )}
                component={Link}
                href={"https://maps.app.goo.gl/3ZmB9Sp4tQ3oamP7A"}
                platform={"nextjs"}
                target={"_blank"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__dfBc)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"50px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/a_d_4/images/location.png",
                    fullWidth: 980,
                    fullHeight: 960,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2U7OO
                  )}
                >
                  {"S\u00e3o Vicente"}
                </div>
              </p.Stack>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sE7Vb
                )}
              >
                {hasVariant(globalVariants, "screen", "tablet")
                  ? "Dias 21 e 22 de outubro"
                  : "21 e 22 de outubro"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aZs7V
                )}
              >
                {"09H - 12H | 17H - 21H"}
              </div>
            </p.Stack>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cgz5P
              )}
            >
              {
                "Neste ano, celebramos a 20\u00aa edi\u00e7\u00e3o do Adora\u00e7\u00e3o & Discipulado. \nEvento que tem como objetivo compartilhar a mensagem do Prop\u00f3sito Eterno e a vis\u00e3o do Discipulado. "
              }
            </div>
            <Button
              className={classNames("__wab_instance", sty.button__pS05O)}
              onClick={async event => {
                const $steps = {};
                $steps["updateModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = p.get(objRoot, variablePath);
                        p.set(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  typeof $steps["updateModalOpen"] === "object" &&
                  typeof $steps["updateModalOpen"].then === "function"
                ) {
                  $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                }
              }}
            >
              {"CRONOGRAMA"}
            </Button>
            <Video
              data-plasmic-name={"htmlVideo"}
              data-plasmic-override={overrides.htmlVideo}
              autoPlay={true}
              className={classNames("__wab_instance", sty.htmlVideo)}
              controls={false}
              loop={true}
              muted={true}
              src={"https://isv-site.vercel.app/video.mp4"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__sHxii)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bnoHj)}
              >
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__kFfN
                  )}
                  component={Link}
                  href={"https://wa.me/+5513991259404"}
                  platform={"nextjs"}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__rszGq)}
                    displayHeight={"75px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"75px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/a_d_4/images/whatsapp.png",
                      fullWidth: 600,
                      fullHeight: 383,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__z2Zr
                    )}
                  >
                    {"FALE CONOSCO"}
                  </div>
                </p.Stack>
              </p.Stack>
            </div>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mQpkc)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__j4F9
                )}
              >
                {"VOC\u00ca FAZ PARTE DISSO!"}
              </div>
              <InscricaoButton
                data-plasmic-name={"inscricaoButton"}
                data-plasmic-override={overrides.inscricaoButton}
                className={classNames("__wab_instance", sty.inscricaoButton)}
              />
            </p.Stack>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__neaTo
              )}
            >
              {"PALESTRANTES"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__hazcD)}>
              <Participantes
                data-plasmic-name={"participantes"}
                data-plasmic-override={overrides.participantes}
                className={classNames("__wab_instance", sty.participantes)}
              />
            </div>
            <PalestrantesData
              data-plasmic-name={"palestrantesData"}
              data-plasmic-override={overrides.palestrantesData}
              className={classNames("__wab_instance", sty.palestrantesData)}
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__x3T27)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aQ01E
                      )}
                    >
                      {"Palestrantes"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9ZBgO
                      )}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.palestrantes.slice(0, 3);
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__z7E7A
                            )}
                            key={currentIndex}
                          >
                            <Palestrante
                              className={classNames(
                                "__wab_instance",
                                sty.palestrante___9VLy5
                              )}
                              slot={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__gjJDo
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__xfh2M
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Adhemar de Campos";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              }
                              slot2={
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.shortDesc;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Autor de aproximadamente 1000 canções, Pr. Adhemar de Campos é um dos mais notórios ministros de louvor e adoração no Brasil, dedicando sua vida a compor canções que ajudam muitos a experimentarem a presença de Deus de um modo profundo. Em 1985 gravou seu primeiro LP e em 1987, num pioneirismo ímpar, realizou a primeira gravação ao vivo de músicas cristãs. Sua história confunde-se com a da música gospel no Brasil, tanto que na década de 80 era um dos poucos produtores de cânticos cristãos com grande projeção. Seu ministério influenciou gerações com composições atemporais que até hoje nos tocam, oferecendo valores de uma vida cristã verdadeira. São mais de 45 anos de caminhada com Cristo, claramente perceptíveis no conjunto de sua obra.";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              }
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img___7Wu7N)}
                                displayHeight={"100%"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"200px"}
                                loading={"lazy"}
                                src={(() => {
                                  try {
                                    return `/${currentItem.name}.png`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "https://site-assets.plasmic.app/6e4631f76206fbc89126315336d4e59c.png";
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            </Palestrante>
                          </div>
                        );
                      })}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__heIkn)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ndmSt
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $ctx.palestrantes.slice(3);
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__u69OZ
                              )}
                              key={currentIndex}
                            >
                              <Palestrante
                                className={classNames(
                                  "__wab_instance",
                                  sty.palestrante___2QivX
                                )}
                                slot={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__wmsF
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__z6X3N
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Adhemar de Campos";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                }
                                slot2={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.shortDesc;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Autor de aproximadamente 1000 canções, Pr. Adhemar de Campos é um dos mais notórios ministros de louvor e adoração no Brasil, dedicando sua vida a compor canções que ajudam muitos a experimentarem a presença de Deus de um modo profundo. Em 1985 gravou seu primeiro LP e em 1987, num pioneirismo ímpar, realizou a primeira gravação ao vivo de músicas cristãs. Sua história confunde-se com a da música gospel no Brasil, tanto que na década de 80 era um dos poucos produtores de cânticos cristãos com grande projeção. Seu ministério influenciou gerações com composições atemporais que até hoje nos tocam, oferecendo valores de uma vida cristã verdadeira. São mais de 45 anos de caminhada com Cristo, claramente perceptíveis no conjunto de sua obra.";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                              >
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img___1CQcI)}
                                  displayHeight={"100%"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"200px"}
                                  loading={"lazy"}
                                  src={(() => {
                                    try {
                                      return `/${currentItem.name}.png`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "https://site-assets.plasmic.app/6e4631f76206fbc89126315336d4e59c.png";
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              </Palestrante>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  </div>
                )}
              </ph.DataCtxReader>
            </PalestrantesData>
          </p.Stack>
          <div className={classNames(projectcss.all, sty.freeBox__gx8Eo)} />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "modal",
    "fixado",
    "responsiveMenu",
    "htmlVideo",
    "inscricaoButton",
    "participantes",
    "palestrantesData"
  ],
  modal: ["modal"],
  fixado: ["fixado"],
  responsiveMenu: ["responsiveMenu"],
  htmlVideo: ["htmlVideo"],
  inscricaoButton: ["inscricaoButton"],
  participantes: ["participantes"],
  palestrantesData: ["palestrantesData"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof AntdModal;
  fixado: "div";
  responsiveMenu: typeof ResponsiveMenu;
  htmlVideo: typeof Video;
  inscricaoButton: typeof InscricaoButton;
  participantes: typeof Participantes;
  palestrantesData: typeof PalestrantesData;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    fixado: makeNodeComponent("fixado"),
    responsiveMenu: makeNodeComponent("responsiveMenu"),
    htmlVideo: makeNodeComponent("htmlVideo"),
    inscricaoButton: makeNodeComponent("inscricaoButton"),
    participantes: makeNodeComponent("participantes"),
    palestrantesData: makeNodeComponent("palestrantesData"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "AD20",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/82149cfdbb4813cc0398b4e443013c4b.png",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
