// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ugFFj82Q2N1H3o8TBWt2M5
// Component: n_LmzxAtzKgu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ResponsiveMenu from "../../ResponsiveMenu"; // plasmic-import: EjDwpL97hh/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponent
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponentHelper
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: EYHwZh9ILg/codeComponent
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponent
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponentHelper
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: RW4q13RFtAd/codeComponent
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: RW4q13RFtAd/codeComponentHelper
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent
import Select from "../../Select"; // plasmic-import: lCsb7GpUU0b/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponent
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponentHelper
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: 7GMXgnERt-hcm/codeComponent

import { useScreenVariants as useScreenVariantsdu4QaJy8Zhmfq } from "../a_d_4/PlasmicGlobalVariant__Screen"; // plasmic-import: Du4QaJY8zhmfq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_copy_of_plasmic_kit_q_4_color_tokens_css from "../imported_dep_5/plasmic_imported_dep_5.module.css"; // plasmic-import: ugrBbUdM5cVqy9hjKxE3Z9/projectcss
import plasmic_antd_5_hostless_2_css from "../imported_dep_2/plasmic_imported_dep_2.module.css"; // plasmic-import: tRwRXcaJGaij9RuE9jQowa/projectcss
import plasmic_antd_5_hostless_css from "../imported_dep_8/plasmic_imported_dep_8.module.css"; // plasmic-import: kEs6HGEd6eEHXTXYJv3dXn/projectcss
import plasmic_plasmic_kit_q_4_color_tokens_css from "../imported_dep_4/plasmic_imported_dep_4.module.css"; // plasmic-import: 4Vuf7Faviq4HnBF9hV4YyE/projectcss
import projectcss from "./plasmic_a_d_3.module.css"; // plasmic-import: ugFFj82Q2N1H3o8TBWt2M5/projectcss
import sty from "../a_d_4/PlasmicAdmin.module.css"; // plasmic-import: n_LmzxAtzKgu/css

createPlasmicElementProxy;

export type PlasmicAdmin__VariantMembers = {};
export type PlasmicAdmin__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdmin__VariantsArgs;
export const PlasmicAdmin__VariantProps = new Array<VariantPropType>();

export type PlasmicAdmin__ArgsType = {
  user?: string;
  password?: string;
};
type ArgPropType = keyof PlasmicAdmin__ArgsType;
export const PlasmicAdmin__ArgProps = new Array<ArgPropType>(
  "user",
  "password"
);

export type PlasmicAdmin__OverridesType = {
  root?: p.Flex<"div">;
  responsiveMenu?: p.Flex<typeof ResponsiveMenu>;
  form?: p.Flex<typeof FormWrapper>;
  input?: p.Flex<typeof AntdInput>;
  passwordInput?: p.Flex<typeof AntdPassword>;
  button?: p.Flex<typeof AntdButton>;
  data?: p.Flex<"div">;
  select?: p.Flex<typeof Select>;
  table?: p.Flex<typeof RichTable>;
};

export interface DefaultAdminProps {}

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdmin__RenderFunc(props: {
  variants: PlasmicAdmin__VariantsArgs;
  args: PlasmicAdmin__ArgsType;
  overrides: PlasmicAdmin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          user: "admin",
          password: "admin"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: p.generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdPassword_Helpers)
      },
      {
        path: "failed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "logged",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec(
          "selectedRowKeys",
          RichTable_Helpers
        )
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "comeco"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "du8jW5s7JnVfk4bHYp38RF",
            opId: "2815092f-d6c5-4fcf-9017-2df18f1e66d9",
            userArgs: {
              query: [
                (() => {
                  const today = new Date();
                  const previousDate = new Date(
                    today.getTime() -
                      ($state.select.value === "comeco"
                        ? 150
                        : +($state.select.value ?? 1)) *
                        24 *
                        60 *
                        60 *
                        1000
                  );

                  const formattedPreviousDate = previousDate
                    .toISOString()
                    .slice(0, 10);
                  return `${formattedPreviousDate}`;
                })()
              ]
            },
            cacheKey: "plasmic.$..$..$.2815092f-d6c5-4fcf-9017-2df18f1e66d9.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdu4QaJy8Zhmfq()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            plasmic_antd_5_hostless_2_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <ResponsiveMenu
            data-plasmic-name={"responsiveMenu"}
            data-plasmic-override={overrides.responsiveMenu}
            className={classNames("__wab_instance", sty.responsiveMenu)}
          />

          {(() => {
            try {
              return !$state.logged;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__cFaBz)}>
              <div className={classNames(projectcss.all, sty.freeBox__kXj3O)}>
                {(() => {
                  try {
                    return $state.failed;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ba7OO
                    )}
                  >
                    {"Usu\u00e1rio ou senha incorretos"}
                  </div>
                ) : null}
              </div>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form),
                  extendedOnValuesChange: async (...eventArgs: any) => {
                    p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                    (async (changedValues, allValues) => {
                      const $steps = {};
                      $steps["updateFailed"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["failed"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              p.set(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        typeof $steps["updateFailed"] === "object" &&
                        typeof $steps["updateFailed"].then === "function"
                      ) {
                        $steps["updateFailed"] = await $steps["updateFailed"];
                      }
                    }).apply(null, eventArgs);
                  },
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],

                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  onFinish: async values => {
                    const $steps = {};
                    $steps["updateFailed"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["failed"]
                            },
                            operation: 0,
                            value:
                              $state.form.value.user !== $props.user ||
                              $state.form.value.password !== $props.password
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      typeof $steps["updateFailed"] === "object" &&
                      typeof $steps["updateFailed"].then === "function"
                    ) {
                      $steps["updateFailed"] = await $steps["updateFailed"];
                    }
                    $steps["updateLogged"] = !$steps.updateFailed
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["logged"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      typeof $steps["updateLogged"] === "object" &&
                      typeof $steps["updateLogged"].then === "function"
                    ) {
                      $steps["updateLogged"] = await $steps["updateLogged"];
                    }
                  },
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  submitSlot: null,
                  validateTrigger: ["onSubmit"],
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                p.initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form.value"
                    }
                  ],

                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__kKCuH
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eQikd
                          )}
                        >
                          {"Usuario"}
                        </div>
                      }
                      name={"user"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input", "value"],
                              AntdInput_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__vrQHz
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6Sj5H
                          )}
                        >
                          {"Senha"}
                        </div>
                      }
                      name={"password"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.passwordInput
                          ),
                          onChange:
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["passwordInput", "value"],
                              AntdPassword_Helpers
                            ),
                          value: p.generateStateValueProp($state, [
                            "passwordInput",
                            "value"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "passwordInput.value"
                            }
                          ],

                          [],
                          AntdPassword_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdPassword
                            data-plasmic-name={"passwordInput"}
                            data-plasmic-override={overrides.passwordInput}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6ObXw
                      )}
                    >
                      <AntdButton
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wxzPo
                          )}
                        >
                          {"Entrar"}
                        </div>
                      </AntdButton>
                    </div>
                  </FormWrapper>
                );
              })()}
            </div>
          ) : null}
          {(() => {
            try {
              return $state.logged;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"data"}
              data-plasmic-override={overrides.data}
              hasGap={true}
              className={classNames(projectcss.all, sty.data)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jGnig)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__szaoJ
                  )}
                >
                  {"Buscar resultados"}
                </div>
                <Select
                  data-plasmic-name={"select"}
                  data-plasmic-override={overrides.select}
                  className={classNames("__wab_instance", sty.select)}
                  onChange={(...eventArgs) => {
                    p.generateStateOnChangeProp($state, ["select", "value"])(
                      eventArgs[0]
                    );
                  }}
                  options={(() => {
                    const __composite = [
                      { value: null, label: null },
                      { value: null, label: null },
                      { label: null, value: null },
                      { label: null, value: null }
                    ];

                    __composite["0"]["value"] = "comeco";
                    __composite["0"]["label"] = "Desde o come\u00e7o";
                    __composite["1"]["value"] = "3";
                    __composite["1"]["label"] = "\u00daltimos 3 dias";
                    __composite["2"]["label"] = "\u00daltimos 7 dias";
                    __composite["2"]["value"] = "7";
                    __composite["3"]["label"] = "\u00daltimos 15 dias";
                    __composite["3"]["value"] = "15";
                    return __composite;
                  })()}
                  value={p.generateStateValueProp($state, ["select", "value"])}
                />
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tGlG0)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ocJ1A)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uxAx
                    )}
                  >
                    {"Adultos Inscritos"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w9OJf
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.query.data.reduce(
                            (acc, row) => acc + +row.adults,
                            0
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__osUwp)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hx4W
                    )}
                  >
                    {"Adultos Pagantes"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eHq0H
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.query.data.reduce(
                            (acc, row) => acc + (row.paid ? +row.adults : 0),
                            0
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__k5UOj)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__tRF1)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wj4MA
                    )}
                  >
                    {"Crian\u00e7as Inscritas"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vjtMw
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.query.data.reduce(
                            (acc, row) => acc + +row.kids,
                            0
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__fDJe4)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zDAk
                    )}
                  >
                    {"Crian\u00e7as Pagantes"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gt7Mg
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.query.data.reduce(
                            (acc, row) => acc + (row.paid ? +row.kids : 0),
                            0
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </p.Stack>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.table),
                  data: (() => {
                    try {
                      return $queries.query;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  fields: (() => {
                    const __composite = [
                      { key: "id", fieldId: "id", title: null, dataType: null },
                      {
                        key: "owner_id",
                        fieldId: "owner_id",
                        dataType: null,
                        isHidden: null
                      },
                      { key: "name", fieldId: "name", title: null },
                      {
                        key: "created_at",
                        fieldId: "created_at",
                        title: null,
                        dataType: null,
                        dateStyle: null
                      },
                      {
                        key: "city",
                        fieldId: "city",
                        title: null,
                        isHidden: null
                      },
                      {
                        key: "state",
                        fieldId: "state",
                        title: null,
                        isHidden: null
                      },
                      { key: "paid", fieldId: "paid", title: null },
                      { key: "sent_email", fieldId: "sent_email", title: null },
                      { key: "adults", fieldId: "adults", title: null },
                      { key: "kids", fieldId: "kids", title: null }
                    ];

                    __composite["0"]["title"] = "ID";
                    __composite["0"]["dataType"] = "string";
                    __composite["1"]["dataType"] = "string";
                    __composite["1"]["isHidden"] = true;
                    __composite["2"]["title"] = "Nome";
                    __composite["3"]["title"] = "Data de inscri\u00e7\u00e3o";
                    __composite["3"]["dataType"] = "datetime";
                    __composite["3"]["dateStyle"] = "medium";
                    __composite["4"]["title"] = "Cidade";
                    __composite["4"]["isHidden"] = true;
                    __composite["5"]["title"] = "Estado";
                    __composite["5"]["isHidden"] = true;
                    __composite["6"]["title"] = "Pago";
                    __composite["7"]["title"] = "Email";
                    __composite["8"]["title"] = "Adultos";
                    __composite["9"]["title"] = "Crian\u00e7as";
                    return __composite;
                  })(),
                  hideDensity: true,
                  hideExports: true,
                  onRowSelectionChanged: async (...eventArgs: any) => {
                    p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "selectedRowKey",
                      ["table", "selectedRowKey"],
                      RichTable_Helpers
                    ).apply(null, eventArgs);
                    p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "selectedRow",
                      ["table", "selectedRow"],
                      RichTable_Helpers
                    ).apply(null, eventArgs);
                    p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "selectedRows",
                      ["table", "selectedRows"],
                      RichTable_Helpers
                    ).apply(null, eventArgs);
                    p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "selectedRowKeys",
                      ["table", "selectedRowKeys"],
                      RichTable_Helpers
                    ).apply(null, eventArgs);
                  },
                  scopeClassName: sty["table__instance"],
                  selectedRowKey: p.generateStateValueProp($state, [
                    "table",
                    "selectedRowKey"
                  ]),
                  selectedRowKeys: p.generateStateValueProp($state, [
                    "table",
                    "selectedRowKeys"
                  ]),
                  themeResetClassName: classNames(
                    projectcss.root_reset,
                    projectcss.root_reset_tags,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_copy_of_plasmic_kit_q_4_color_tokens_css.plasmic_tokens,
                    plasmic_antd_5_hostless_2_css.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_kit_q_4_color_tokens_css.plasmic_tokens
                  )
                };
                p.initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "selectedRowKey",
                      plasmicStateName: "table.selectedRowKey"
                    },
                    {
                      name: "selectedRow",
                      plasmicStateName: "table.selectedRow"
                    },
                    {
                      name: "selectedRows",
                      plasmicStateName: "table.selectedRows"
                    },
                    {
                      name: "selectedRowKeys",
                      plasmicStateName: "table.selectedRowKeys"
                    }
                  ],

                  [],
                  RichTable_Helpers ?? {},
                  child$Props
                );

                return (
                  <RichTable
                    data-plasmic-name={"table"}
                    data-plasmic-override={overrides.table}
                    {...child$Props}
                  />
                );
              })()}
            </p.Stack>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "responsiveMenu",
    "form",
    "input",
    "passwordInput",
    "button",
    "data",
    "select",
    "table"
  ],

  responsiveMenu: ["responsiveMenu"],
  form: ["form", "input", "passwordInput", "button"],
  input: ["input"],
  passwordInput: ["passwordInput"],
  button: ["button"],
  data: ["data", "select", "table"],
  select: ["select"],
  table: ["table"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  responsiveMenu: typeof ResponsiveMenu;
  form: typeof FormWrapper;
  input: typeof AntdInput;
  passwordInput: typeof AntdPassword;
  button: typeof AntdButton;
  data: "div";
  select: typeof Select;
  table: typeof RichTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdmin__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdmin__VariantsArgs;
    args?: PlasmicAdmin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdmin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdmin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAdmin__ArgProps,
          internalVariantPropNames: PlasmicAdmin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdmin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdmin";
  } else {
    func.displayName = `PlasmicAdmin.${nodeName}`;
  }
  return func;
}

export const PlasmicAdmin = Object.assign(
  // Top-level PlasmicAdmin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    responsiveMenu: makeNodeComponent("responsiveMenu"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    passwordInput: makeNodeComponent("passwordInput"),
    button: makeNodeComponent("button"),
    data: makeNodeComponent("data"),
    select: makeNodeComponent("select"),
    table: makeNodeComponent("table"),

    // Metadata about props expected for PlasmicAdmin
    internalVariantProps: PlasmicAdmin__VariantProps,
    internalArgProps: PlasmicAdmin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdmin;
/* prettier-ignore-end */
